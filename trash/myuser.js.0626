// 2014 0219
// Use redis for user/password
//

var conf = require("./config-mj.js");

var clog = console.log;
var util = require('util');
var see  = util.inspect;

var mylog = require("./mylog.js");
var folder = require("./myutils/folder.js");

var redis_basic = require("./myutils/redis-basic.js");
var rclient = redis_basic.client;

var bucket = require("./aws/bucket.js");

//if (typeof rclient === 'undefined'){
//  //var redis_host = "54.248.54.80", redis_port = null;
//  var redis_host = conf.redis_host, redis_port = conf.redis_port;
//
//  var redis = require("redis");
//  var rclient = redis.createClient(redis_port, redis_host);
//
//  // if you'd like to select database 3, instead of 0 (default), call
//  // rclient.select(3, function() { /* ... */ });
//
//  rclient.on("error", function (err) {
//      console.log("Error " + err);
//  });
//}

// function findById(id, fn) {
//   var idx = id - 1;
//   if (users[idx]) {
//     fn(null, users[idx]);
//   } else {
//     fn(new Error('User ' + id + ' does not exist'));
//   }
// }

function findByUsername(username, fn){
  rclient.exists(username, function(err, name_exists){
    //console.log("hit redis, and ", username, " exists.");
    if(err){
      return fn(new Error(err));
    }
    if(name_exists === 0){
      // Name not exists
      return fn(null, null);
    }

    // make a user object
    var user = {};
    rclient.hgetall(username, function(err, userdata){
      if(err){
        return fn(new Error(err));
      }
      user = userdata;
      if (typeof user.username === 'undefined') user.username = username;
      if (typeof user.id === 'undefined') user.id = username;
      return fn(null, user);
    });
  });
}


function _findByUsername(username, fn) {
  for (var i = 0, len = users.length; i < len; i++) {
    var user = users[i];
    if (user.username === username) {
      return fn(null, user);
    }
  }
  return fn(null, null);
}


//
//function add_user_40521(user){
//  // user : hash {username:..., password:..., id:..., referrer:...}
//  rclient.exists(user.username, function(err, name_exists){
//    console.log("'add user 40521' hit redis, and ", user.username);
//    if(err){
//      throw new Error(err);
//    }
//    if(name_exists === 0){
//      // Name not exists
//      process.nextTick(function(){
//        rclient.hmset(user.username, user, function(err, reply){
//          if (err) {
//            throw new Error(
//              err.toString() + " When add user: " + user.username);
//          }
//        });
//      });
//      //
//    }else{
//      return "username exists";
//    }
//  });
//}


// not finished, but using, 0525.
// default folders not added, the function for default folders is ready.
function add_user(user_info){
  // user_info : hash {username:..., password:..., id:..., referrer:...}
  rclient.exists(user_info.username, function(err, name_exists){
    console.log("add user hit redis, and ", user_info.username);
    if(err){
      throw new Error(err);
    }
    if(name_exists === 0){
      // Name not exists
      process.nextTick(function(){
        folder.make_home_folder({owner:user_info.username, abspath: user_info.username}, 
          function(err, folder_key){
            //console.log("folder key");
            //console.log(folder_key);

            user_info['home_folder'] = folder_key;
            user_info['.ggwhat'] = "user_information";

            //console.log("user_info");
            //console.log(user_info);
            rclient.hmset(user_info.username, user_info, function(err, reply){
              if (err) {
                throw new Error(
                  err.toString() + " When add user: " + user_info.username);
              }
            });

        });
      });
      //
    }else{
      return "username exists";
    }
  });
}


// start using init_user_a, it get a callback, 0527
function init_user(user_info){
  // user_info : hash {username:..., password:..., id:..., referrer:...}
  rclient.exists(user_info.username, function(err, name_exists){
    //console.log("add user hit redis, and ", user_info.username);
    if(err){
      throw new Error(err);
    }
    if(name_exists === 1){
      return "username exists";
    }
    // Name not exists:
    user_info['.ggwhat'] = "user_information";

    bucket.init_user_home(user_info.username, function(err, reply){
      //console.log("user_info"); console.log(user_info);
      rclient.hmset(user_info.username, user_info, function(err, reply){
        if (err) {
          throw new Error(
            err.toString() + " When add user: " + user_info.username);
        }
      });
    });

  });
}


/* 
 * To replace: init_user, init_user_a
 *
 * @user_info : hash {username:..., password:..., id:..., referrer:...}
 * @callback  :
 *   callback(err, user_obj)
 */
function init_user_b(user_info, callback){
  rclient.exists(user_info.username, function(err, name_exists){
    //console.log("add user hit redis, and ", user_info.username);
    if(err){ callback(err, null); }

    if(name_exists === 1){ callback(null, null); }

    // Name not exists:
    user_info['.ggwhat'] = "user_information";
    user_info['storage'] = "s3";
    user_info['s3-bucket'] = conf.root_bucket;

    bucket.init_home_structure_file(user_info.username, function(err, reply){
      if (err) { callback(err, null); }
      //console.log("user_info"); console.log(user_info);
      rclient.hmset(user_info.username, user_info, function(err, reply){
        if (err) { callback(err, null); }
        callback(null, user_info);
      });
    });

  });
}


function delete_user(username){
  rclient.exists(username, function(err, name_exists){
    if(name_exists === 1){
      bucket.delete_with_prefix(username);
      rclient.del(username);
    }
  });
}


/*
 * Do this with CAREFULNESS!!
 */
function test_delete_user(){
  ['abc', ].forEach(function(name){
    delete_user(name);
  });
}


function add_file(username, file){
  // add a record (key-value) to user data
  rclient.exists(username, function(err, name_exists){
    console.log("add_file hit redis, for ", username);
    if(err){
      throw new Error(err);
    }
    if(name_exists){
      var file_info = JSON.stringify(file);
      process.nextTick(function(){
        rclient.hset(username, file.name, file_info, function(err, reply){
          if (err) {
            throw new Error(
              err.toString() + " When add user: " + user.username);
          }
        });
      });
      //
    }else{
      return "username not exists";
    }
  });
}

function add_file_key(username, file){
  // add a record (key-value) to user data
  rclient.exists(username, function(err, name_exists){
    //console.log("'add file key' hit redis, for ", username);
    if(err){
      throw new Error(err);
    }
    if(name_exists){
      var file_info = JSON.stringify(file);
      process.nextTick(function(){

        mylog.info("username"); mylog.info(username);
        mylog.info("redis_file_key"); mylog.info(file.redis_file_key);
        rclient.hset(username, file.name, file.redis_file_key, function(err, reply){
          if (err) {
            throw new Error(
              err.toString() + " When add user: " + user.username);
          }
        });
      });
      //
    }else{
      return "username not exists";
    }
  });
}


function make_user_file_href_list(username, callback){
  // callback(err, list){//...}
  // list: [{file_name:--, href:--}]

  rclient.exists(username, function(err, name_exists){
    if(err){
      throw new Error(err);
    }
    console.log(name_exists.toString() + typeof(name_exists));
    if(name_exists){
      rclient.hgetall(username, function(err, userobj){
        console.log(userobj);
        console.log(typeof(userobj));
        for (var k in userobj){
        }

      });
    }
  });
}


// testing
function redis_user_hash(username){
  rclient.hgetall(username, function(err, userdata){
    if(err){
      clog(err);
    }
    clog(see(userdata));
  });
}

function test_findByUsername(name){
  findByUsername(name, function(err, user){
    if (err){
      clog("err\n");
      clog(see(err));
    }
    if (!user){
      clog("not user");
    }

    clog("you get a user\n");
    clog(see(user));
  });
}


function test_make_user_file_href_list(){
  make_user_file_href_list('abc', function(err, alist){
    console.log(alist);
  });
}


function test_add_user(){
  var ui = { // user info
    username : 'tmpb',
    password : 'kkkooo',
    referrer : 'abc'
  };
  add_user(ui);
}


if (require.main === module){
  //test_make_user_file_href_list();

  //test_add_user();
  test_delete_user();
  setTimeout(function(){ rclient.quit(); }, 5000);  // close the redis.
}

module.exports.findByUsername = findByUsername;
module.exports.add_user = add_user;
module.exports.add_file = add_file;
module.exports.add_file_key = add_file_key;
module.exports.init_user = init_user;
module.exports.init_user_b = init_user_b;

// vim: set et ts=2 sw=2 fdm=indent:
