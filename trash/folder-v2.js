// Generated by CoffeeScript 1.8.0
(function() {
  var Promise, S3Folder, add_default_home_folders, async, basic_test, bucket, calculate_folder_meta_file_s3key, checking, checking_1, delete_file, get_file_meta, get_file_meta_by_path, get_file_meta_by_uuid, get_file_uuid, get_sorted_message_list_as_ul, image_file, init_home_folder, init_home_folder_0927, json_file, log28, make_folder_meta_file_s3key, myconfig, myutil, new_folder, p, path, peek_possible_exist_folder, retrieve_file_meta, retrieve_file_obj, retrieve_folder, retrieve_folder_meta, s3file, test_add_folder, test_get_file_meta_by_path, test_get_file_meta_by_uuid, test_get_file_uuid, test_init_home_folder, test_init_home_folder_many, test_read_folder_meta, test_retrieve_file_obj, test_retrieve_folder, test_retrieve_folder_meta, tools, u;

  u = require('underscore');

  path = require('path');

  Promise = require('bluebird');

  async = require('async');

  bucket = require('./bucket.js');

  s3file = require('./file.js');

  image_file = require('./image-file.js');

  json_file = require('./json-file.js');

  myconfig =  require("../config/config.js");

  myutil = require('../myutils/myutil.js');

  log28 = require('../myutils/mylogb.js').double_log('/tmp/log28');

  tools = require('./tools-cof.js');

  p = console.log;

  S3Folder = (function() {
    function S3Folder(folder_path) {
      this.folder_path = folder_path;
      this.meta = {};
      this.members_file_name = '.gg.members.json';
      this.viewers_file_name = '.gg.viewers.json';
    }

    S3Folder.prototype.get_meta = function() {
      return this.meta;
    };

    S3Folder.prototype.fuck = function() {
      return p('fucking');
    };

    S3Folder.prototype.show_meta = function() {
      p(this.meta);
      return this.meta;
    };

    S3Folder.prototype.prepare_basic_path = function() {
      if (typeof this.meta.path === 'undefined') {
        this.meta.path = this.folder_path;
      }
      return this.calculate_folder_meta_s3key();
    };

    S3Folder.prototype.init = function(_opt) {
      u.defaults(this.meta, _opt);
      if (typeof this.meta.uuid === 'undefined') {
        this.meta.uuid = myutil.get_uuid();
      }
      this.prepare_basic_path();
      this.meta.error = false;
      if (typeof this.meta.name === 'undefined') {
        this.meta.name = path.basename(this.folder_path);
      }
      this.meta.filetype = 'goodagood-folder';
      if (typeof this.meta.renders === 'undefined') {
        this.meta.renders = {};
      }
      if (typeof this.meta.html === 'undefined') {
        this.meta.html = {};
      }
      if (typeof this.meta.files === 'undefined') {
        this.meta.files = {};
      }
      if (typeof this.meta.file_uuids === 'undefined') {
        this.meta.file_uuids = {};
      }
      if (typeof this.meta.file_names === 'undefined') {
        this.meta.file_names = {};
      }
      return this.meta.what = myconfig.IamFolder;
    };

    S3Folder.prototype.calculate_folder_meta_s3key = function() {
      this.meta.folder_meta_s3key = path.join(myconfig.folder_meta_prefix, this.folder_path);
      this.meta.meta_s3key = this.meta.folder_meta_s3key;
      return this.meta.meta_file_path;
    };

    S3Folder.prototype.calculate_s3_meta_file_path = function() {
      this.meta.folder_meta_s3key = path.join(myconfig.folder_meta_prefix, this.folder_path);
      this.meta.meta_s3key = this.meta.folder_meta_s3key;
      this.meta.meta_file_path = calculate_folder_meta_file_s3key(this.meta.path);
      return this.meta.meta_file_path;
    };

    S3Folder.prototype.is_file_exists = function(filename) {
      if (typeof meta === 'undefined') {
        return false;
      }
      if (typeof this.meta.file_names === 'undefined') {
        return false;
      }
      return !!this.meta.file_names[filename];
    };

    S3Folder.prototype.is_file_exists_old = function(filename) {
      if (typeof meta === 'undefined') {
        return false;
      }
      if (typeof this.meta.files === 'undefined') {
        return false;
      }
      return !!this.meta.files[filename];
    };

    S3Folder.prototype.add_file_thorough = function(file_meta, callback) {
      return _add_file_to_redis_list(file_meta, function(err, reply) {
        if (err) {
          log28('failed to add file info to redis', file_meta.path);
        }
        this.meta.files[file_meta.name] = file_meta;
        this.build_file_list();
        if (callback) {
          return callback();
        }
      });
    };

    S3Folder.prototype.check_in_file = function(file_meta, callback) {
      this.meta.file_uuids[file_meta.uuid] = file_meta;
      if (typeof this.meta.file_names[file_meta.name] === 'undefined') {
        this.meta.file_names[file_meta.name] = [file_meta];
      } else {
        if (u.isArray(this.meta.file_names[file_meta.name])) {
          this.meta.file_names[file_meta.name].push(file_meta);
        } else {
          return callback('err, it is not an array', null);
        }
      }
      this.build_file_list();
      return callback(null, this.meta.file_name[file_meta.name]);
    };

    S3Folder.prototype.add_extra_0929 = function(file_meta) {
      var repr;
      repr = this.get_short_json_repr(file_meta);
      this.meta.file_uuids[file_meta.uuid] = repr;
      if (typeof this.meta.file_names[file_meta.name] === 'undefined' || !this.meta.file_names[file_meta.name]) {
        return this.meta.file_names[file_meta.name] = [file_meta.uuid];
      } else {
        return this.meta.file_names[file_meta.name].push(file_meta.uuid);
      }
    };

    S3Folder.prototype.add_file = function(file_meta, callback) {
      if (typeof this.meta.files !== 'undefined' && this.meta.files) {
        this.meta.files[file_meta.uuid] = file_meta;
      }
      this.add_extra_0929(file_meta);
      return callback(null, meta);
    };

    S3Folder.prototype.add_file_save_folder = function(file_meta, callback) {
      this.add_file(file_meta);
      return this.save_meta(callback);
    };

    S3Folder.prototype.add_file_obj_save_folder = function(file_obj, callback) {
      return this.add_file_save_folder(file_obj.get_meta(), callback);
    };

    S3Folder.prototype.get_file_obj = function(name, callback) {
      var file_meta;
      if (!this.is_file_exists(name)) {
        return callback(null);
      }
      file_meta = this.meta.files[name];
      return s3file.new_s3_file_obj(file_meta, function(base) {
        base.set_meta(file_meta);
        return base.switch_with_filetype(callback);
      });
    };

    S3Folder.prototype.retrieve_old_folder_meta = function(callback) {
      var folder_meta_key, self;
      if (typeof this.meta.meta_s3key === 'undefined') {
        this.prepare_basic_path();
      }
      folder_meta_key;
      if (typeof this.meta.folder_meta_s3key !== 'undefined') {
        folder_meta_key = this.meta.folder_meta_s3key;
      }
      if (typeof this.meta.meta_s3key !== 'undefined') {
        folder_meta_key = this.meta.meta_s3key;
      }
      self = this;
      return bucket.read_json(folder_meta_key, function(err, _meta_) {
        if (err) {
          this.meta.error = err;
          callback(err, null);
          return;
        }
        self.meta = _meta_;
        p('fuck');
        self.fuck();
        this.show_meta();
        return callback(null, this.meta);
      });
    };

    S3Folder.prototype.new_json_file = function(filename, content_json) {
      var data, file_name, file_path;
      file_name = filename;
      file_path = path.join(this.meta.path, file_name);
      data = {
        name: file_name,
        path: file_path,
        filetype: "json",
        owner: {
          username: this.meta.path,
          timestamp: Date.now()
        },
        permission: {
          owner: 'rwx',
          group: '',
          other: ''
        }
      };
      return json_file.new_json_file_obj(data, function(jobj) {
        jobj.set_up_from_json(content_json);
        return this.add_file(jobj.get_meta(), this.save_meta);
      });
    };

    S3Folder.prototype.build_file_list = function(callback) {
      this.list_files_by_id();
      return callback(null, null);
    };

    S3Folder.prototype.list_files_by_id = function() {
      var ul;
      ul = '<ul class="file-list list-unstyled">';
      u.each(this.meta.files, function(file) {
        var li;
        if (file.name.indexOf('.gg') !== 0) {
          li = '<li class="file">\n';
          li += '<span class="filename">' + file.name + '</span>&nbsp\n';
          li += '<span class="size">' + file.size + '</span>&nbsp\n';
          li += '<span class="size">' + file.path + '</span>&nbsp\n';
          li += '<span class="size">' + file.uuid + '</span>&nbsp\n';
          li += '</li>\n';
          return ul += li;
        }
      });
      ul += '</ul>';
      this.meta.renders.simple_ul = ul;
      return this.meta.renders.ul = ul;
    };

    S3Folder.prototype.dot_filter = function(uuid_list) {
      return uuid_list.filter(function(uuid) {
        if (this.meta.file_uuids[uuid].name.indexOf('.') === 0) {
          return false;
        }
        return true;
      });
    };

    S3Folder.prototype.list_files = function(callback) {
      var ul, ulv, uuid_list;
      uuid_list = this.dot_filter(Object.keys(this.meta.file_uuids));
      ul = ulv = '<ul class="folder-list list-unstyled">';
      return async.map(uuid_list, this.get_file_meta_by_uuid, function(err, results) {
        if (err) {
          return callback(err, results);
        }
        results.forEach(function(_meta) {
          ul += _meta.html.li;
          return ulv += _meta.html.li_viewer;
        });
        ul += '</ul>';
        ulv += '</ul>';
        this.meta.renders.ul_for_viewer = ulv;
        this.meta.renders.ul = ul;
        return callback(null, [ul, ulv]);
      });
    };

    S3Folder.prototype.list_files_for_owner = function() {
      var ul;
      ul = '<ul class="folder-list list-unstyled">';
      u.each(this.meta.files, function(file) {
        if (typeof file.html !== 'undefined') {
          if (file.name.indexOf('.gg') !== 0) {
            return ul += file.html.li;
          }
        }
      });
      ul += '</ul>';
      return this.meta.renders.ul = ul;
    };

    S3Folder.prototype.list_files_for_viewer = function() {
      var ul;
      ul = '<ul class="folder-list list-unstyled">';
      u.each(this.meta.files, function(file) {
        if (typeof file.html !== 'undefined') {
          if (file.name.indexOf('.gg') !== 0) {
            if (typeof file.html.li_viewer !== 'undefined') {
              return ul += file.html.li_viewer;
            }
          }
        }
      });
      ul += '</ul>';
      return this.meta.renders.ul_for_viewer = ul;
    };

    S3Folder.prototype.render_folder = function() {
      return this.build_file_list(function() {});
    };

    S3Folder.prototype.get_ul_renderring = function() {
      if (typeof meta === 'undefined') {
        return '<ul> <li> ERROR, meta is undefined </li></ul>';
      }
      if (!meta) {
        return '<ul> <li> ERROR, meta is equal to false? </li></ul>';
      }
      if (typeof this.meta.renders === 'undefined') {
        this.meta.renders = {};
      }
      if (typeof this.meta.renders.ul !== 'undefined') {
        return this.meta.renders.ul;
      }
      if (typeof this.meta.renders.ul === 'undefined') {
        return '<ul> <li> ERROR, @meta.renders.ul is undefined </li></ul>';
      }
      return this.meta.renders.ul;
    };

    S3Folder.prototype.get_renderring_for_viewer = function() {
      if (typeof this.meta.renders === 'undefined') {
        this.meta.renders = {};
      }
      if (typeof this.meta.renders.ul_for_viewer !== 'undefined') {
        return this.meta.renders.ul_for_viewer;
      }
      return "<ul><li>Currently not prepared ready for viewers</li></ul>";
    };

    S3Folder.prototype.get_renderring_for_public = function() {
      if (typeof this.meta.renders === 'undefined') {
        this.meta.renders = {};
      }
      if (typeof this.meta.renders.ul_for_public !== 'undefined') {
        return this.meta.renders.ul_for_public;
      }
      return "<ul><li>Currently not prepared for public viewers</li></ul>";
    };

    S3Folder.prototype.give_ul_renderring = function(viewer_name, callback) {
      if (_is_owner(viewer_name)) {
        return callback(this.get_ul_renderring());
      }
      return this.has_member(viewer_name, function(is_member) {
        if (is_member) {
          return callback(this.get_ul_renderring());
        }
        return this.has_viewer(viewer_name, function(is_viewer) {
          if (is_viewer) {
            return callback(this.get_renderring_for_viewer());
          }
          return callback(this.get_renderring_for_public());
        });
      });
    };

    S3Folder.prototype.check_username = function(username, callback) {
      if (_is_owner(username)) {
        return callback('owner');
      }
      return this.has_member(username, function(is_member) {
        if (is_member) {
          return callback('member');
        }
        return this.has_viewer(username, function(is_viewer) {
          if (is_viewer) {
            return callback('viewer');
          }
          return callback('who-known');
        });
      });
    };

    S3Folder.prototype.save_meta = function(callback) {
      return bucket.write_json(this.meta.meta_s3key, meta, function(err, reply) {
        if (callback) {
          if (err) {
            return callback(err, null);
          }
          return callback(null, meta);
        }
      });
    };

    S3Folder.prototype.meta_smells = function() {
      if (u.isEmpty(this.meta)) {
        return true;
      }
      if (typeof this.meta.name === 'undefined') {
        return true;
      }
      if (!this.meta.name) {
        return true;
      }
      if (typeof this.meta.path === 'undefined') {
        return true;
      }
      if (!this.meta.path) {
        return true;
      }
      if (typeof this.meta.meta_file_path === 'undefined') {
        return true;
      }
      if (!this.meta.meta_file_path) {
        return true;
      }
      return false;
    };

    S3Folder.prototype.render_file = function(filename, callback) {
      return this.get_file_obj(filename, function(file_obj) {
        var file_meta;
        file_obj.render_html_repr();
        file_meta = file_obj.get_meta();
        return this.meta.files[filename] = file_meta;
      });
    };

    S3Folder.prototype.render_all_files = function() {
      var keys;
      keys = u.keys(this.meta.files);
      keys.forEach(function(filename) {
        console.log(filename);
        return this.render_file(filename, function() {});
      });
      this.build_file_list();
      return this.save_meta();
    };

    S3Folder.prototype.delete_file = function(filename, callback) {
      this.get_file_obj(filename, function(fobj) {
        return fobj.delete_s3_storage();
      });
      delete this.meta.files[filename];
      this.build_file_list();
      this.save_meta();
      if (callback) {
        return callback();
      }
    };

    S3Folder.prototype.rename_file = function(filename, new_name) {
      var new_meta;
      new_meta = u.omit(this.meta.files[filename], 'path', 'html', 'local_file', 'timestamp', 's3_stream_href', 'delete_href');
      new_meta.name = new_name;
      new_meta.path = path.join(this.meta.path, new_name);
      return s3file.new_s3_file_obj(new_meta, function(fobj) {
        fobj.set_meta(new_meta);
        fobj.calculate_meta_defaults();
        return fobj.switch_with_filetype(function(typed_fobj) {
          typed_fobj.render_html_repr();
          this.add_file(typed_fobj.get_meta());
          delete this.meta.files[filename];
          this.build_file_list();
          return this.save_meta();
        });
      });
    };

    S3Folder.prototype.add_folder = function(name, callback) {
      var folder_path, opt_;
      folder_path = path.join(this.meta.path, name);
      opt_ = {
        name: name,
        path: folder_path,
        uuid: myutil.get_uuid(),
        'parent-dir': this.meta.path,
        timestamp: Date.now(),
        owner: this.meta.owner,
        permission: {
          owner: 'rwx',
          group: '',
          other: ''
        },
        html: {}
      };
      if (typeof opt_.uuid === 'undefined') {
        opt_.uuid = myutil.get_uuid();
      }
      return new_folder(opt_, function(err, new_folder_obj) {
        if (err) {
          return callback(err, null);
        }
        new_folder_obj.self_render_as_a_file();
        return new_folder_obj.save_meta(function(err, the_meta) {
          if (err) {
            return callback(err, null);
          }
          return this.add_file(new_folder_obj.get_meta(), function() {
            return this.save_meta(function(err, what) {
              return callback(err, new_folder_obj);
            });
          });
        });
      });
    };

    S3Folder.prototype.promised_add_folder = function(name) {
      return new Promise(function(resolve, reject) {
        return this.add_folder(name, function(err, new_folder_obj) {
          if (err) {
            return reject(err);
          }
          return resolve(new_folder_obj);
        });
      });
    };

    S3Folder.prototype.self_render_as_a_file = function() {
      var li;
      li = '<li class="folder">';
      li += '<span class="glyphicon glyphicon-folder-close"> </span>&nbsp';
      li += '&nbsp<a href="/ls/' + this.meta.path + '" >' + meta['name'] + '</a>';
      li += '</li>\n';
      if (!this.meta.html) {
        this.meta.html = {};
      }
      if (typeof this.meta.html === 'undefined') {
        this.meta.html = {};
      }
      return this.meta.html.li = li;
    };

    S3Folder.prototype.build_blueimp_pic_gallery_list = function() {
      var file_names, list;
      list = [];
      file_names = Object.keys(this.meta.files);
      file_names.forEach(function(name) {
        var fileInfo, one, src, thumb;
        if (this.meta.files[name].filetype === 'image') {
          fileInfo = this.meta.files[name];
          src = path.join(myconfig.s3_stream_prefix, fileInfo.storage.key);
          thumb;
          if (fileInfo['thumbnail-s3key']) {
            thumb = path.join(myconfig.s3_stream_prefix, fileInfo['thumbnail-s3key']);
          } else {
            thumb = '';
          }
          one = '<a href="' + src(+'" title="' + fileInfo.name + '" data-description="The value keep increasing justly" >');
          one += '<img src="' + thumb + '" alt="' + fileInfo.name + '"> </a>';
          return list.push(one);
        }
      });
      return list;
    };

    S3Folder.prototype.sort_files_by_date = function() {
      var sorted;
      sorted = u.sortBy(this.meta.files, function(e) {
        var date, epoc;
        date = new Date(e['lastModifiedDate']);
        epoc = date.getTime();
        return 1 - epoc;
      });
      return this.meta.files = sorted;
    };

    S3Folder.prototype.init_members_file = function() {
      var content;
      this.meta.is_team_folder = true;
      content = [];
      if (this.meta.owner && this.meta.owner.username) {
        content.push(this.meta.owner.username);
      }
      return this.new_json_file(members_file_name, content);
    };

    S3Folder.prototype._add_members = function(name_list, callback) {
      if (!this.is_file_exists(members_file_name)) {
        this.init_members_file();
      }
      if (!u.isArray(name_list)) {
        return callback(null);
      }
      return this.get_file_obj(members_file_name, function(member_file_obj) {
        return member_file_obj.get_json(function(j) {
          j = u.union(j, name_list);
          console.log(j);
          member_file_obj.write_json(j);
          return this.add_file_obj_save_folder(member_file_obj, function() {
            if (callback) {
              return callback();
            }
          });
        });
      });
    };

    S3Folder.prototype.delete_members = function(name_list, callback) {
      return this.get_file_obj(members_file_name, function(member_file_obj) {
        return member_file_obj.get_json(function(j) {
          j = u.difference(j, name_list);
          member_file_obj.write_json(j);
          return this.add_file_obj_save_folder(member_file_obj, function() {
            if (callback) {
              return callback(j);
            }
          });
        });
      });
    };

    S3Folder.prototype.get_all_members = function(callback) {
      if (!this.is_file_exists(members_file_name)) {
        return callback(null);
      }
      return this.get_file_obj(members_file_name, function(member_file_obj) {
        return member_file_obj.get_json(callback);
      });
    };

    S3Folder.prototype.has_member = function(username, callback) {
      if (typeof this.meta.is_team_folder === 'undefined') {
        return callback(false);
      }
      if (!this.meta.is_team_folder) {
        return callback(false);
      }
      if (!this.is_file_exists(members_file_name)) {
        return callback(false);
      }
      return this.get_file_obj(members_file_name, function(member_file_obj) {
        if (!member_file_obj) {
          return callback(false);
        }
        return member_file_obj.get_json(function(j) {
          if (!u.isArray(j)) {
            return callback(false);
          }
          if (j.indexOf(username) >= 0) {
            return callback(true);
          }
          if (j.indexOf('*') >= 0) {
            return callback(true);
          }
          return callback(false);
        });
      });
    };

    S3Folder.prototype.init_viewers_file = function() {
      var content;
      this.meta.is_open_folder = true;
      content = [];
      return this.new_json_file(viewers_file_name, content);
    };

    S3Folder.prototype.add_viewers = function(name_list, callback) {
      if (!this.is_file_exists(viewers_file_name)) {
        this.init_viewers_file();
      }
      if (!u.isArray(name_list)) {
        return callback(null);
      }
      return this.get_file_obj(viewers_file_name, function(viewer_file_obj) {
        return viewer_file_obj.get_json(function(j) {
          j = u.union(j, name_list);
          viewer_file_obj.write_json(j);
          return this.add_file_obj_save_folder(viewer_file_obj, function() {
            if (callback) {
              return callback(j);
            }
          });
        });
      });
    };

    S3Folder.prototype.delete_viewers = function(name_list, callback) {
      if (!this.is_file_exists(viewers_file_name)) {
        this.init_viewers_file();
      }
      return this.get_file_obj(viewers_file_name, function(viewer_file_obj) {
        return viewer_file_obj.get_json(function(j) {
          j = u.difference(j, name_list);
          viewer_file_obj.write_json(j);
          return this.add_file_obj_save_folder(viewer_file_obj, function() {
            if (callback) {
              return callback();
            }
          });
        });
      });
    };

    S3Folder.prototype.get_all_viewers = function(callback) {
      if (!this.is_file_exists(viewers_file_name)) {
        this.init_viewers_file();
      }
      return this.get_file_obj(viewers_file_name, function(viewer_file_obj) {
        return viewer_file_obj.get_json(callback);
      });
    };

    S3Folder.prototype.has_viewer = function(username, callback) {
      if (typeof this.meta.is_open_folder === 'undefined') {
        return callback(false);
      }
      if (!this.meta.is_open_folder) {
        return callback(false);
      }
      if (!this.is_file_exists(viewers_file_name)) {
        return callback(false);
      }
      return this.get_file_obj(viewers_file_name, function(viewer_file_obj) {
        return viewer_file_obj.get_json(function(j) {
          if (!u.isArray(j)) {
            return callback(false);
          }
          if (j.indexOf(username) >= 0) {
            return callback(true);
          }
          if (j.indexOf('*') >= 0) {
            return callback(true);
          }
          return callback(false);
        });
      });
    };

    S3Folder.prototype.get_file_meta_by_uuid = function(uuid, callback) {
      var _meta;
      _meta = this.meta.file_uuids[uuid];
      if (_meta['short-json']) {
        return bucket.read_json(_meta['meta_s3key'], callback);
      } else {
        return callback(null, _meta);
      }
    };

    S3Folder.prototype.get_files_by_name = function(name, callback) {
      var uuid_list;
      uuid_list = this.meta.file_names[name];
      return async.parallel(uuid_list, this.get_file_meta_by_uuid, function(err, meta_list) {
        console.log(err, meta_list);
        return callback(err, meta_list);
      });
    };

    S3Folder.prototype.get_short_json_repr = function(_meta) {
      var repr;
      _meta = _meta || meta;
      repr = u.pick(_meta, 'name', 'meta_s3key', 'size', 'timestamp', 'filetype');
      repr['short-json'] = true;
      return repr;
    };

    return S3Folder;

  })();

  basic_test = function() {
    var f;
    f = new S3Folder('kkk');
    p('folder get create, very basicly it got through.');
    return u.isEmpty(f);
  };

  peek_possible_exist_folder = function(folder_path, callback) {
    var folder_meta_key;
    folder_meta_key = calculate_folder_meta_file_s3key(folder_path);
    return bucket.s3_object_exists(folder_meta_key, callback);
  };

  new_folder = function(opt_, callback) {
    var folder;
    folder = new S3Folder(opt_.path);
    folder.init(opt_);
    return callback(null, folder);
  };

  retrieve_folder = function(folder_path, callback) {
    var folder;
    folder = new S3Folder(folder_path);
    return folder.retrieve_old_folder_meta(function(err, meta) {
      return callback(null, folder);
    });
  };

  test_retrieve_folder = function() {
    return retrieve_folder('abc', function(folder) {
      if (!folder) {
        console.log('not a folder?');
        return;
      }
      return console.log(folder.get_meta());
    });
  };

  retrieve_folder_meta = function(folder_path, callback) {
    return make_s3folder(folder_path, function(err, folder) {
      return folder.retrieve_old_folder_meta(callback);
    });
  };

  test_retrieve_folder_meta = function() {
    return retrieve_folder_meta('abc', function(meta) {
      if (!meta) {
        console.log('not a meta?');
        console.log(typeof meta);
        console.log('is null?:');
        console.log(u.isNull(meta));
      }
      return console.log(meta);
    });
  };

  calculate_folder_meta_file_s3key = function(folder_path) {
    var s3key;
    s3key = path.join(myconfig.meta_file_prefix, folder_path);
    return s3key;
  };

  make_folder_meta_file_s3key = function(folder_path) {
    var s3key;
    s3key = path.join(myconfig.folder_meta_prefix, folder_path);
    return s3key;
  };

  retrieve_file_meta = function(file_path, callback) {
    var filename, folder_path;
    folder_path = path.dirname(file_path);
    filename = path.basename(file_path);
    return retrieve_folder_meta(folder_path, function(meta) {
      var file_meta;
      file_meta = this.meta.files[filename];
      return callback(file_meta);
    });
  };

  get_file_meta = function(opt, callback) {
    var dirname, filename;
    dirname = path.dirname(opt.path);
    filename = path.basename(opt.path);
    retrieve_folder(dirname, function(folder_obj) {});
    if (u.has(opt, 'uuid')) {
      return get_file_meta_by_uuid(dirname, opt.uuid, callback);
    }
  };

  get_file_meta_by_path = function(file_path, callback) {
    return get_file_uuid(file_path, function(err, uuid_list) {
      var dirname;
      dirname = path.dirname(file_path);
      _uuid_to_meta(uuid, _cb)(function() {
        return get_file_meta_by_uuid(dirname, uuid, _cb);
      });
      return async.map(uuid_list, _uuid_to_meta, callback);
    });
  };

  test_get_file_meta_by_path = function() {
    var file_path;
    file_path = 'abc/goodagood';
    return get_file_meta_by_path(file_path, function(err, metas) {
      return console.log(err, metas);
    });
  };

  get_file_uuid = function(file_path, callback) {
    var filename, folder_path;
    folder_path = path.dirname(file_path);
    filename = path.basename(file_path);
    return retrieve_folder_meta(folder_path, function(err, folder_meta) {
      return callback(err, folder_meta.file_names[filename]);
    });
  };

  test_get_file_uuid = function(f_path) {
    return get_file_uuid(f_path, function(err, id) {
      console.log(err, id);
      return tools.exit();
    });
  };

  get_file_meta_by_uuid = function(dirname, uuid, callback) {
    return retrieve_folder_meta(dirname, function(err, folder_meta) {
      return callback(err, folder_meta.files[uuid]);
    });
  };

  test_get_file_meta_by_uuid = function() {
    var dirname, file_path;
    file_path = 'abc/goodagood';
    dirname = 'abc';
    return get_file_uuid(file_path, function(err, uuid) {
      console.log(file_path, uuid);
      return get_file_meta_by_uuid(dirname, uuid, function(err, _meta) {
        console.log(err, _meta);
        return tools.exit();
      });
    });
  };

  retrieve_file_obj = function(file_path, callback) {
    var filename, folder_path;
    folder_path = path.dirname(file_path);
    filename = path.basename(file_path);
    return retrieve_folder(folder_path, function(folder_obj) {
      return folder_obj.get_file_obj(filename, callback);
    });
  };

  test_retrieve_file_obj = function() {
    path = 'abc/Png.png';
    return retrieve_file_obj(path, function(fobj) {
      return console.log(fobj.get_meta());
    });
  };

  delete_file = function(file_path, callback) {
    var filename, folder_path;
    folder_path = path.dirname(file_path);
    filename = path.basename(file_path);
    return retrieve_folder(folder_path, function(folder_obj) {
      var file_meta, folder_meta;
      folder_meta = folder_obj.get_meta();
      file_meta = folder_meta.files[filename];
      if (!file_meta) {
        return;
      }
      folder_obj.delete_file(filename);
      if (callback) {
        return callback(folder_obj);
      }
    });
  };

  init_home_folder_0927 = function(username, callback) {
    var folder_opt, s3key;
    s3key = path.join(myconfig.meta_file_prefix, username);
    folder_opt = {};
    folder_opt['path'] = username;
    folder_opt['name'] = username;
    folder_opt['parent-dir'] = '';
    folder_opt.owner = username;
    folder_opt.permission = {
      owner: 'rwx',
      other: '',
      group: ''
    };
    folder_opt['create-timestamp'] = Date.now();
    folder_opt['timestamp'] = Date.now();
    return new_folder(folder_opt, function(err, home_folder) {
      return home_folder.promised_add_folder('goodagood').then(function(goodagood_folder_obj) {
        return new Promise(function(resolve, reject) {
          return goodagood_folder_obj.add_folder('message', function(err, tmp_new_folder_obj) {
            if (err) {
              reject(goodagood_folder_obj);
            }
            return goodagood_folder_obj.add_folder('etc', function(err, tmp_new_folder_obj) {
              return goodagood_folder_obj.build_file_list(function() {
                return goodagood_folder_obj.save_meta(function() {
                  if (err) {
                    reject(goodagood_folder_obj);
                  }
                  return resolve(goodagood_folder_obj);
                });
              });
            });
          });
        });
      }).then(function(what) {
        return home_folder.promised_add_folder('public');
      }).then(function(what) {
        home_folder.build_file_list(function() {});
        return home_folder.save_meta(function(err, meta) {
          return callback(err, home_folder);
        });
      })["catch"](function(e) {
        console.log('E: ', e);
        return callback(e, null);
      });
    });
  };

  init_home_folder = function(username, callback) {
    var folder_opt, s3key;
    s3key = path.join(myconfig.meta_file_prefix, username);
    folder_opt = {};
    folder_opt['path'] = username;
    folder_opt['name'] = username;
    folder_opt['parent-dir'] = '';
    folder_opt.owner = username;
    folder_opt.permission = {
      owner: 'rwx',
      other: '',
      group: ''
    };
    folder_opt['create-timestamp'] = Date.now();
    folder_opt['timestamp'] = Date.now();
    return new_folder(folder_opt, function(home_folder) {
      home_folder.add_folder('goodagood', function(goodagood) {
        goodagood.add_folder('message');
        return goodagood.add_folder('etc', function(etc) {});
      });
      home_folder.add_folder('public', function(etc) {});
      home_folder.build_file_list();
      return home_folder.save_meta(callback);
    });
  };

  test_init_home_folder = function() {
    var name;
    name = 'tmp';
    return init_home_folder(name, function() {});
  };

  add_default_home_folders = function(home_folder, callback) {
    home_folder.add_folder('goodagood', function(goodagood) {
      goodagood.add_folder('in');
      return goodagood.add_folder('out');
    });
    home_folder.add_folder('etc', function(etc) {});
    home_folder.add_folder('public', function(etc) {});
    home_folder.build_file_list();
    return home_folder.save_meta(callback);
  };

  test_read_folder_meta = function() {
    var folder_path;
    folder_path = 'muji';
    return make_s3folder(folder_path, {
      flag_to_read_in_meta: true
    }, function(folder) {
      var m;
      m = folder.get_meta();
      return console.log(m);
    });
  };

  test_init_home_folder_many = function() {
    var names;
    names = ['muji', 'andrew', 'dirty-show', 'test'];
    return names.forEach(function(name) {
      console.log(name);
      return init_home_folder(name, function() {});
    });
  };

  test_add_folder = function() {
    var username;
    username = 'abc';
    return retrieve_folder(username, function(abc) {
      return add_default_home_folders(abc);
    });
  };

  get_sorted_message_list_as_ul = function(username, callback) {
    var message_folder_path;
    message_folder_path = path.join(username, myconfig.message_folder);
    return retrieve_folder(message_folder_path, function(folder) {
      var files, names, sorted_names, ul;
      files = folder.get_meta().files;
      names = Object.keys(files);
      sorted_names = u.sortBy(names, function(name) {
        var negative_timestamp;
        negative_timestamp = 0 - parseInt(files[name].timestamp);
        return negative_timestamp;
      });
      ul = '<ul class="folder-list list-unstyled">';
      sorted_names.forEach(function(name) {
        var file;
        file = files[name];
        if (typeof file.html !== 'undefined') {
          return ul += file.html.li;
        }
      });
      ul += '</ul>';
      return callback(ul);
    });
  };

  checking_1 = function(folder_name) {
    var folder, meta;
    folder_name = folder_name || 'abc';
    folder = new S3Folder(folder_name);
    folder.init();
    meta = folder.get_meta();
    return p(meta);
  };

  checking = function(folder_name) {
    folder_name = folder_name || 'abc';
    return retrieve_folder(folder_name, function(err, folder) {
      var meta;
      return meta = folder.get_meta();
    });
  };

  if (require.main === module) {
    checking('abc');
  }

  module.exports.S3Folder = S3Folder;

  module.exports.retrieve_folder = retrieve_folder;

  module.exports.retrieve_folder_meta = retrieve_folder_meta;

  module.exports.retrieve_file_obj = retrieve_file_obj;

  module.exports.retrieve_file_meta = retrieve_file_meta;

  module.exports.delete_file = delete_file;

  module.exports.get_sorted_message_list_as_ul = get_sorted_message_list_as_ul;

  module.exports.init_home_folder = init_home_folder;

  module.exports.init_home_folder_0927 = init_home_folder_0927;

  module.exports.get_file_uuid = get_file_uuid;

}).call(this);
