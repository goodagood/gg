// Generated by CoffeeScript 1.8.0
(function() {
  var Promise, bucket, convert_meta_to_ul, fix_file_meta, meta, myconfig, myutil, new_plain_file, obj, old, p, pass_meta_to_task, path, promise_to_make_old_simple_file_object, promised_simple_s3_file_obj, put_local_file, put_local_file_without_pass, simple_s3_file_obj, task, u, _build_ul, _keep, _simple_s3_file_obj;

  u = require("underscore");

  Promise = require("bluebird");

  path = require("path");

  old = require("./simple-file.js");

  bucket = require("./bucket.js");

  myutil = require('../myutils/myutil.js');

  myconfig =  require("../config/config.js");

  task = require('../myutils/job.js');

  p = console.log;

  meta = {};

  obj = {};

  promise_to_make_old_simple_file_object = Promise.promisify(old.simple_s3_file_obj);

  _simple_s3_file_obj = function(meta_src, pass_file_obj) {
    return promise_to_make_old_simple_file_object(meta_src).then(function(obj) {
      return obj;
    })["catch"](function(err) {
      p("Error: ", err);
      return err;
    });
  };

  simple_s3_file_obj = function(meta_src, pass_file_obj) {
    return old.simple_s3_file_obj(meta_src, function(err, _obj) {
      if (!err) {
        meta = _obj.get_meta();
        obj = _obj;
      }
      obj.convert_meta_to_ul = convert_meta_to_ul;
      return pass_file_obj(err, obj);
    });
  };

  promised_simple_s3_file_obj = Promise.promisify(simple_s3_file_obj);

  _keep = function(hash, names) {
    var name, _i, _len, _meta;
    if (u.isEmpty(names)) {
      return hash;
    }
    _meta = {};
    for (_i = 0, _len = names.length; _i < _len; _i++) {
      name = names[_i];
      _meta[name] = hash[name];
    }
    return _meta;
  };

  _build_ul = function(hash) {
    var ul;
    ul = "<ul> \n";
    u.each(hash, function(val, key) {
      var li;
      li = '<li class="key"> <span>' + key.toString() + "</span> : ";
      if (u.isArray(val)) {
        li += _build_ul(val);
      } else if (u.isObject(val)) {
        li += _build_ul(val);
      } else if (!val) {
        li += '<span class="value">' + (" " + val + " </span>");
      } else {
        li += '<span class="value">' + val.toString() + '</span>';
      }
      li += "</li>\n";
      return ul += li + "\n";
    });
    ul += "</ul>\n";
    return ul;
  };

  convert_meta_to_ul = function() {
    var attr_names, _show_meta;
    attr_names = ['name', 'path', 'owner', 'uuid', 'timestamp', 'size', 'permission'];
    _show_meta = _keep(meta, attr_names);
    return _build_ul(_show_meta);
  };

  new_plain_file = function(text, meta, callback) {
    var s3key;
    fix_file_meta(meta);
    s3key = meta.storage.key;
    return bucket.write_text_file(s3key, text, function(err, aws_result) {
      return pass_meta_to_task(meta, function(err, what) {
        if (callback != null) {
          return callback(err, what);
        }
      });
    });
  };

  put_local_file = function(local_file_path, meta, callback) {
    var s3key;
    fix_file_meta(meta);
    s3key = meta.storage.key;
    return bucket.put_one_file(local_file_path, s3key, function(err, aws_result) {
      return pass_meta_to_task(meta, callback);
    });
  };

  put_local_file_without_pass = function(local_file_path, meta, callback) {
    var s3key;
    fix_file_meta(meta);
    s3key = meta.storage.key;
    return bucket.put_one_file(local_file_path, s3key, function(err, aws_result) {
      return callback(err, meta);
    });
  };

  fix_file_meta = function(_meta) {
    if (_meta.name == null) {
      return false;
    }
    if (_meta.path == null) {
      return false;
    }
    if (!_meta.owner) {
      return false;
    }
    if (_meta.dir == null) {
      _meta.dir = path.dirname(_meta.path);
    }
    if (_meta.timestamp == null) {
      _meta.timestamp = Date.now();
    }
    if (_meta.uuid == null) {
      _meta.uuid = myutil.get_uuid();
    }
    _meta.meta_s3key = path.join(myconfig.new_meta_prefix, _meta.dir, _meta.uuid);
    _meta.initial_key = _meta.meta_s3key;
    _meta.s3key = path.join(myconfig.raw_file_prefix, _meta.dir, _meta.uuid);
    _meta.storage = {
      type: 's3',
      key: _meta.s3key
    };
    return _meta;
  };

  pass_meta_to_task = function(meta, callback) {
    var job;
    job = {
      name: 'new-file-meta',
      task_name: 'new-file-meta',
      username: meta.owner,
      folder: meta.dir,
      meta_s3key: meta.meta_s3key
    };
    return bucket.write_json(meta.meta_s3key, meta, function(err, reply) {
      if (err) {
        log28('write file meta to s3 ERR', [meta.meta_s3key, meta]);
        return callback(err, null);
      }
      return task.pub_task(task.channel, job, callback);
    });
  };

  module.exports.simple_s3_file_obj = simple_s3_file_obj;

  module.exports.promised_simple_s3_file_obj = promised_simple_s3_file_obj;

  module.exports.new_file_obj_from_meta = old.new_file_obj_from_meta;

  module.exports.fix_file_meta = fix_file_meta;

  module.exports.new_plain_file = new_plain_file;

  module.exports.put_local_file = put_local_file;

  module.exports.put_local_file_without_pass = put_local_file_without_pass;

}).call(this);
