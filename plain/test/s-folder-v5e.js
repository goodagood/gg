// Generated by CoffeeScript 1.8.0, modified by hand.

var Promise, assert, async, data, fm, folder_path,
    gg_folder_name, new_folder_name, p, path, stop, u, user_name;

assert = require("assert");
u      = require("underscore");
async  = require("async");
path   = require("path");
Promise= require("bluebird");
data   = require("./config.js");
fm     = require("../aws/folder-v5.js");
folder_path = 'abc';
user_name   = 'abc';
gg_folder_name  = 'goodagood';
new_folder_name = 'test';

p = console.log;

stop = function() {
    return setTimeout(process.exit, 500);
};

describe("t-folder-v5e, 1", function() {
    it("build file list", function(done) {
        fm.retrieve_promisified_folder(user_name).then(function(folder) {
            return folder;
        }).then(function(f) {
            var Meta;
            return Meta = f.get_meta();
        }).then(function(m) {
            var ul;
            ul = m.renders.ul;
            assert(u.isString(ul));
            done();
        });
    });
});

describe("t-folder-v5e, 2", function() {
    it("get file list", function(done) {
        var file_name;
        file_name = '.gg.members.json';
        fm.retrieve_promisified_folder(folder_path).then(function(folder) {
            folder.get_file_objs_by_name(file_name, function(e, objs) {
                u.each(objs, function(o) {
                    return o.read_to_string();
                });
                done();
            });
        });
    });
});

describe("t-folder-v5e, 3", function() {
    it("get file meta by uuid", function(done) {
        var dirname, file_path;
        file_path = "abc/goodagood";
        dirname = "abc";
        done();
    });
});

// This failed any way, 'undefined is not a function', brain fucker
// test_retrieve_a_css in 'folder-v5.coffee' can work.
//describe("t-folder-v5e, 5", function() {
//    it("get file object by name, 'folder.css'", function(done) {
//        var file_name = 'folder.css';
//        assert(u.isFunction(fm.retrieve_promisified_folder));
//
//        var thenable = fm.retrieve_promisified_folder(folder_path)
//        assert( u.isFunction(thenable.then));
//        p( thenable);
//        //done();
//        //thenable.then(folder_path).then(function(folder) {
//        thenable.then(
//            function(folder) {
//                assert(u.isObject(folder));
//                done();
//        });
//    });
//});

