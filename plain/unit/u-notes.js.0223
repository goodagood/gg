var assert = require('assert');
var async  = require('async');
var u      = require('underscore');


var bucket    = require("../aws/bucket.js")
var notes     = require("../aws/notes-file.js");
var pubsub    = require("../myutils/pubsub.js");

var tutil = require("../myutils/test-util.js");


var p    = console.log;
var stop = function() { return setTimeout(process.exit, 1000); };




// -- checkings --

function empty_obj(meta){
  meta = meta || {
    name : 'testing.ggnotes'
    , path : 'abc/test'
    , owner: 'abc'
    , notes: 'just test, at ' + (new Date()).toString()
  };
  notes.notes_file(meta, function(err, nobj){
    if (err){ p ('what err?'); return this.err = err; }
    nobj.prepare_html_elements(function(err, elements){
      p ('err, element: ', err, elements);
    });
    tutil.stop();
  });
}

function show_new_meta(name){
    // @name: username

    name = name || null;
    collector.list_new_meta_data(name, function(err, data){
        //p('err, data:\n', err, data);
        assert(!err);
        assert(u.isArray(data));
        p('length: ', data.length);

        // get one:
        var d0 = data[0];
        p('data list zero:\n', d0);

        bucket.read_json(d0.Key, function(err, meta){
            p('get one: err, meta.name, uuid:\n', err, meta.name, meta.uuid);

            collector.collect_meta(meta, function(err, what){
                p ('c c m got: ', err, what);
                //stop();
            });

        });
    });
}

function show_redis_tasks(){
    pubsub.find_tasks(function(err, task_ids){
        //p('finding tasks:\n', err, task_ids);
        assert(task_ids.length >= 0);

        pubsub.find_one_task(-1, function(err, what){
            p('found one task: \n', err, what);
            stop();
        });

    });
}

function check_redis_collect(){
    collector.collect_redis(function(err, what){
        p('collecting redis-: ', err, what);
        stop();
    });
}

// Used in repl
function repl_list_new_meta_data (vname, username){
    //# @vname    : string, name of the variable should get the list.
    //# @username : string, for whom to get new file meta thing.

    collector.list_new_meta_data(username, function (err, list){
        p('you get the list:\n', list);
        if(err) p('u, YOU, got err:', err);
        if(err) return this.err = err;
        this[vname] = list;
        p('name set? ', vname);
    });
}

function get_from_s3(info){

    var username = 'abc';
    collector.list_new_meta_data(username, function (err, list){
        if(err) return p('fuck e');
        var one = list.pop();
        p('this is going to be do s3 job:\n', one);
        collector.do_s3_job(one, function(err, what){
            if (err) p('get from s3, do s3 job, err, what:', err, what);
            if (!err) p('get from s3, do s3 job, SEEMS no err');
            stop();
        });
    });

}

function finish_s3_new_meta_info(username){

    username = username || 'abc';
    collector.list_new_meta_data(username, function (err, list){
        if(err) return p('fuck, work in finish...');

        var functions = [];
        u.each(list, function(item){
            functions.push(function(callback){
                collector.do_s3_job(item, function(err, f){
                    p('done s3 job:', item.Key);
                    setTimeout(function(){ callback(err, item.Key); } ,5000);
                });
            });
        });

        async.series(functions, 
            function(err, what){
                if (err) p('get from s3, do s3 job, err, what:', err, what);
                if (!err) p('get from s3, do s3 job, SEEMS no err, got what:\n', what);
                stop();
        });
    });

}

function finish_b(username){
    username = username || 'tmpab';
    collector.do_s3_jobs(username, function(err, what){
                if (err) p('get from s3, do s3 job, err, what:', err, what);
                if (!err) p('get from s3, do s3 job, SEEMS no err, got what:\n', what);
                stop();
    });
}


function collect_meta_213(meta){
    // @meta is the record in s3, for new file info.
    bucket.read_json(meta.Key, function(err, meta){
        p('get one: err, meta.name, uuid:\n', err, meta.name, meta.uuid);

        collector.collect_meta(meta, function(err, what){
            p ('c c m got: ', err, what);
            return 'haha';
        });

    });
}

function collect_all_new_meta(){
}


if(require.main === module){
    empty_obj();
}


