// Generated by CoffeeScript 1.8.0
(function() {
  var Promise, assert, folder_name, fv4, p, stop, u;

  assert = require("assert");

  u = require("underscore");

  Promise = require("bluebird");

  fv4 = require("../aws/folder-v4.js");

  folder_name = 'abc';

  p = console.log;

  stop = function() {
    return setTimeout(process.exit, 500);
  };

  describe("test (v4) folder-v4.js,", function() {
    return it("should gives object,", function(done) {
      return fv4.make_s3folder_v4a(folder_name).then(function(folder) {
        assert(!u.isEmpty(folder));
        assert(u.isFunction(folder.read_text_file));
        assert(u.isFunction(folder.write_text_file));
        assert(u.isObject(folder.members_obj));
        return folder.get_meta();
      }).then(function(meta) {
        assert(u.isObject(meta));
        return assert(!u.isEmpty(meta));
      }).then(function() {
        return done();
      });
    });
  });

  describe("folder-v4.js, 2,", function() {
    return it("can we use it for sure? 1031,", function(done) {
      return fv4.make_s3folder_v4a(folder_name).then(function(folder) {
        assert(folder.file_exists('goodagood'));
        assert(!folder.file_exists('what-the-fuck---'));
        return done();
      });
    });
  });

  describe("test (v4) folder-v4.js,", function() {
    return it("test delete in hash,", function(done) {
      var a, len;
      a = {
        a: 1,
        b: 2,
        c: [1, 2, 3],
        d: {
          da: 1,
          db: 2
        }
      };
      len = Object.keys(a).length;
      assert(len > 1);
      delete a['a'];
      assert(a['a'] == null);
      assert(a['b'] != null);
      delete a['d']['da'];
      assert(a['d']['da'] == null);
      assert(a['d']['db'] != null);
      return done();
    });
  });

  describe("check to get folder", function() {
    return it("get folder", function(done) {
      return fv4.make_s3folder_v4a(folder_name).then(function(folder) {
        assert(u.isObject(folder));
        return assert(!u.isEmpty(folder));
      }).then(done());
    });
  });

}).call(this);
