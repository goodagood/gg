// Generated by CoffeeScript 1.8.0
(function() {
  var Promise, assert, file_name, file_path, fm, folder_name, p, stop, u;

  assert = require("assert");

  u = require("underscore");

  Promise = require("bluebird");

  fm = require("../aws/folder-v5.js");

  folder_name = 'abc';

  file_name = 'txt22';

  file_path = 'abc/txt22';

  p = console.log;

  stop = function() {
    return setTimeout(process.exit, 500);
  };

  describe("folder-v5.js, 1", function() {
    return it("should gives object,", function(done) {
      this.timeout(35 * 1000);
      return fm.make_s3folder(folder_name).then(function(folder) {
        assert(u.isObject(folder));
        assert(!u.isEmpty(folder));
        assert(u.isFunction(folder.read_text_file));
        assert(u.isFunction(folder.write_text_file));
        assert(u.isFunction(folder.get_meta));
        return folder.get_meta();
      }).then(function(meta) {
        return assert(u.isObject(meta));
      }).then(function() {
        return done();
      });
    });
  });

  describe("folder-v5.js, 1.1", function() {
    return it("retrieve folder object,", function(done) {
      return fm.retrieve_folder(folder_name).then(function(folder) {
        var meta;
        assert(!u.isEmpty(folder));
        return meta = folder.get_meta();
      }).then(function(meta) {
        assert(!u.isEmpty(meta));
        assert(u.isString(meta.name));
        return done();
      });
    });
  });

  describe("folder-v5.js, 1.2", function() {
    return it("is owner", function(done) {
      return fm.retrieve_folder(folder_name).then(function(folder) {
        assert(!u.isEmpty(folder));
        assert(folder.is_owner(folder_name));
        return done();
      });
    });
  });

  describe("folder-v5.js, 1.3", function() {
    return it("can we use it for sure? 1031,", function(done) {
      return fm.retrieve_folder(folder_name).then(function(folder) {
        assert(folder.file_exists('goodagood'));
        assert(!folder.file_exists('what-the-fuck---'));
        return done();
      });
    });
  });

  describe("folder-v5.js, 2", function() {
    return it("we can get meta?", function(done) {
      return fm.make_s3folder(folder_name).then(function(folder) {
        assert(!u.isEmpty(folder));
        assert(u.isFunction(folder.add_folder));
        return folder.promise_to_retrieve_saved_meta();
      }).then(function(meta) {
        assert(u.isObject(meta));
        assert(!u.isEmpty(meta));
        assert(u.isString(meta.name));
        return assert(u.isString(meta.path));
      }).then(function() {
        return done();
      });
    });
  });

  describe("folder-v5.js, 3", function() {
    return it("should get file uuid,", function(done) {
      var name;
      name = file_name;
      return fm.retrieve_folder(folder_name).then(function(folder) {
        return folder.get_file_objs_by_name(name, function(err, objs) {
          var one;
          assert(objs.length > 0);
          one = objs[0];
          return u.each(objs, function(o) {
            var n, uuid;
            n = o.get_meta()['name'];
            uuid = o.get_meta()['uuid'];
            assert(u.isString(n));
            return assert(u.isString(uuid));
          });
        });
      }).then(function() {
        return done();
      });
    });
  });

  describe("folder-v5.js, 4", function() {
    return it("should get meta of files,", function(done) {
      var Folder, Meta;
      this.timeout(35 * 1000);
      Meta = null;
      Folder = null;
      return fm.retrieve_folder(folder_name).then(function(folder) {
        var files, k, keys, v, _results;
        Meta = folder.get_meta();
        files = Meta.files;
        keys = Object.keys(files);
        assert(keys.length > 0);
        _results = [];
        for (k in files) {
          v = files[k];
          assert(u.isString(k));
          if (v.name === 'goodagood') {
            assert(u.isObject(v));
            assert(!u.isEmpty(v));
            _results.push(assert(u.isString(v.name)));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      }).then(function() {
        return done();
      });
    });
  });

  describe("folder-v5.js, 6", function() {
    return it("get uuids by name,", function(done) {
      assert(u.isFunction(fm.get_file_uuid));
      assert(u.isString(file_path));
      return done();
    });
  });

}).call(this);
