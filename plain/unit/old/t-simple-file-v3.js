// Generated by CoffeeScript 1.8.0
(function() {
  var Promise, assert, async, data, fm, folder_path, gg_folder_name, new_folder_name, p, path, stop, u, user_name;

  assert = require("assert");

  u = require("underscore");

  async = require("async");

  path = require("path");

  Promise = require("bluebird");

  data = require("./config.js");

  fm = require("../aws/folder-v5.js");

  folder_path = 'abc';

  user_name = 'abc';

  gg_folder_name = 'goodagood';

  new_folder_name = 'test';

  p = console.log;

  stop = function() {
    return setTimeout(process.exit, 500);
  };

  describe("t-simple-file-v3, 1", function() {
    return it("get file list", function(done) {
      var file_name;
      file_name = 'goodagood';
      return fm.retrieve_promisified_folder(folder_path).then(function(folder) {
        assert(u.isObject(folder));
        return folder.get_file_objs_by_name(file_name, function(e, objs) {
          assert(u.isArray(objs));
          u.each(objs, function(o) {
            if (o) {
              return o.read_to_string();
            }
          });
          return done();
        });
      });
    });
  });

  describe("t-simple-file-v3, 2", function() {
    return it("get one file '.gg.members.json'", function(done) {
      var file_name;
      file_name = '.gg.members.json';
      return fm.retrieve_promisified_folder(folder_path).then(function(folder) {
        assert(u.isObject(folder));
        return folder.get_file_objs_by_name(file_name, function(e, objs) {
          var meta0;
          assert(!e);
          meta0 = objs[0].get_meta();
          assert(u.isObject(meta0));
          return async.map(objs, function(o, callback) {
            return o.read_to_string(function(e, s) {
              assert(!e);
              assert(u.isString(s));
              return callback(null, s);
            });
          }, function(err, results) {
            return done();
          });
        });
      });
    });
  });

  describe("t-simple-file-v3, 3", function() {
    return it("get one file 'folder.css'", function(done) {
      var file_name;
      file_name = 'folder.css';
      return fm.retrieve_promisified_folder(folder_path).then(function(folder) {
        assert(u.isObject(folder));
        return folder.get_file_objs_by_name(file_name, function(e, objs) {
          var meta0;
          assert(!e);
          meta0 = objs[0].get_meta();
          assert(u.isObject(meta0));
          return u.each(objs, function(o) {
            return o.read_to_string(function(e, s) {
              assert(!e);
              assert(u.isString(s));
              return done();
            });
          });
        });
      });
    });
  });

}).call(this);
