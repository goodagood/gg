// Generated by CoffeeScript 1.8.0
(function() {
  var afile, assert, async, fappend, folders, myconfig, path, s3file, s3folder, u;

  assert = require('assert');

  async = require('async');

  path = require('path');

  u = require('underscore');

  s3folder = require('../aws/folder-v1.js');

  s3file = require('../aws/simple-file.js');

  myconfig =   require("../config/config.js");

  fappend = require('../myutils/mylogb.js').append_file;

  afile = '/tmp/a9.log';

  folders = ['abc'];


  /*
  describe 'coffee test mocha is working,', ->
      it  'can make a few assert exception to make sure it keeps firing, ', ->
          assert.equal(1, 1, 'obviously equal')
           *assert.equal(1, 2, 'obviously not equal')
   */

  describe('Retrieve folder,', function() {
    var name;
    name = folders[0];
    return it('should get folder obj,', function(done) {
      return s3folder.retrieve_folder(name, function(err, folder_obj) {
        var meta;
        assert(!err, ("err after retrieve folder: " + name) + name);
        assert(!u.isNull(folder_obj), 'folder should not be null');
        meta = folder_obj.get_meta();
        assert(typeof meta !== 'undefined');
        assert(u.isObject(meta));
        assert(!u.isNull(meta));
        return done();
      });
    });
  });


  /*
  describe('try to test multiple async calls,', function(){
    names = ['abc', 'goodagood']
    it('should get EACH folder obj,', function(done){
      async.map(
        names, 
        s3folder.retrieve_folder, 
  
        function(err, folder_objs){
          assert not  err, 'err after retrieve folder: ' )
          assert not  u.isNull(folder_objs), 'folder should not be null')
          assert( u.isArray(folder_objs), 'folder list should be array')
          describe('see each folder,', function(){
            u.each(folder_objs, function(fobj){
              meta = fobj.get_meta()
              assert(u.isObject(meta))
               *fappend(afile, meta)
            })
            done()
          })
        }
  
      )
  
    })
  
  })
   */

}).call(this);
