// Generated by CoffeeScript 1.8.0



var assert = require("assert");
var u = require("underscore");
var path = require("path");
var Promise = require("bluebird");

var members = require("../aws/members.js");

var folder_module = require("../aws/folder-v5.js");
var tool  = require("../myutils/test-util.js");


var _test_folder_path = 'abc';
var _test_folder_name = 'abc';
var _test_user_name   = 'abc';


t1_get_manager_from_folder = function(test){
    //test.expect(4);
    p ('testing "manager from folder"');

    var Mobj;

    folder_module.retrieve_folder(_test_folder_path).then(function(folder){
        return folder.get_member_manager();
    }).then( function (obj){
        Mobj = obj;
        test.ok(u.isObject(Mobj));
        return Mobj;
    }).then(function(o){
        return o.get_json();
    }).then(function(j){
        test.ok(u.isObject(j));
        test.ok(! u.isNull(j));
        test.ok(u.isArray(j.viewers));
        p('json: ', j);
    }).then(function(){
        test.done();
    });
}

function _is_a_role(str){
    var roles = ['owner', 'member', 'viewer', 'who-known'];
    var index = roles.indexOf(str);
    if (index < 0) return false;
    else return true;
}

var t2_user_role = function(test){
    var _path =  _test_folder_path;
    p ('testing "user role"');

    var Folder, Mobj;

    folder_module.retrieve_folder(_path).then(function(folder){
        Folder = folder;
        test.ok(u.isObject(Folder));
        return folder.get_member_manager();
    }).then( function (obj){
        Mobj = obj;
        return Mobj;
    }).then(function(o){
        Folder.check_username('haha', function(err, role){
            p('haha is ', role);
            test.ok(_is_a_role(role));
            Folder.check_username(_test_user_name, function(err, role){
                p(_test_user_name, ' is ', role);
                test.ok(_is_a_role(role));
                test.done();
            });
        });
    });
};

module.exports.test_one = {
    setUp: function (callback) {
        //this.foo = 'bar';
        callback();
    },
    tearDown: function (callback) {
        //p ('- in tearDown');
        callback();
    },

    "test1 : get manager from folder" : t1_get_manager_from_folder,
    "test2 : test user role" : t2_user_role,

};


module.exports.last = function(test){
    test.expect(1);
    test.ok(true);
    stop();
    test.done();
}


// -- The rest is for checking:


var p    = console.log;
var stop = function(seconds) {
    var seconds = seconds || 1;
    var milli_sec = seconds * 1000;
    setTimeout(process.exit, milli_sec);
};



check_user_role = function(folder_path){
    folder_path = folder_path || _test_folder_path;
    p ('checking "manager from folder"');

    var Folder, Mobj;

    folder_module.retrieve_folder(folder_path).then(function(folder){
        Folder = folder;
        return folder.get_member_manager();
    }).then( function (obj){
        Mobj = obj;
        p ('member manager:\n', Mobj);
        return Mobj;
    }).then(function(o){
        Folder.check_username('haha', function(err, role){
            p('haha is ', role);
        });
        Folder.check_username(_test_user_name, function(err, role){
            p(_test_user_name, ' is ', role);
        });
    }).then(function(j){
        //p('json: ', j);
    }).then(function(){
        stop();
    });
}



check_get_manager_from_folder = function(_path){
    _path = _path || _test_folder_path;
    p ('checking "manager from folder"');

    var Mobj;

    folder_module.retrieve_folder(_path).then(function(folder){
        return folder.get_member_manager();
    }).then( function (obj){
        Mobj = obj;

        //p('got member object:\n', Mobj);
        p('got folder in member object:\n', Mobj.folder);
        return Mobj;
    }).then(function(o){

        //o.init_folder();
    }).then(function(folder_obj){
        //p('show member object:\n', Mobj);
        //Mobj.show_folder();
        return Mobj.get_json();
    }).then(function(j){
        p('json: ', j);
    }).then(function(){
        stop();
    });
}


// Beside testing , here do some checking:
if (require.main === module){
    //check_get_manager_from_folder();
    check_user_role('aa');
}

