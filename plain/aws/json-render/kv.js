// Generated by CoffeeScript 1.8.0
(function() {
  var check_nv_opt, check_simple_nv, jade, jkv, join_classes, myutil, nk2li, nv, p, render_boolean_value, render_name_value, u;

  u = require("underscore");

  jade = require("jade");

  myutil = require("../myutils/myutil.js");

  nv = "<<%= tag %>>\n    <<%= name_tag %> <%= attributes %> > <%= name %>\n    </<%=value_tag %>>\n    <%= separator %>\n    <<%=value_tag %> <%= value_attributes %> > <%= value %>\n    </<%=value_tag %>>\n</<%= tag %>>";

  join_classes = function(names, default_class_name) {
    var klass, klasses;
    names = names || [];
    klass = [];
    if (u.isEmpty(names)) {
      klasses = [default_class_name];
    } else {
      klasses = u.union(klass, names);
    }
    return klasses.join(' ');
  };

  render_name_value = function(input) {
    var html, name, nt, nt_attr, nt_class_list, nt_class_str, nt_id, separator, tag, value, vt, vt_attr, vt_class_list, vt_class_str, vt_id;
    tag = input.tag || 'li';
    name = input.name || 'unknown?';
    nt = input.name_tag || 'span';
    nt_attr = input.name_tag_attr || '';
    nt_id = input.name_tag_id || null;
    if (nt_id) {
      nt_attr += " id=\"" + nt_id + "\" ";
    }
    nt_class_list = input.name_tag_class || [];
    nt_class_str = join_classes(input.name_tag_classes, 'name');
    nt_attr += " class=\"" + nt_class_str + "\" ";
    value = input.value || 'unknown?';
    vt = input.value_tag || 'span';
    vt_attr = input.value_tag_attr || '';
    vt_id = input.value_tag_id || null;
    if (vt_id) {
      vt_attr += " id=\"" + vt_id + "\" ";
    }
    vt_class_list = input.value_tag_class || [];
    vt_class_str = join_classes(input.value_tag_class, 'value');
    vt_attr += " class=\"" + vt_class_str + "\" ";
    separator = input.separator || ' <span class="separator">:</span> ';
    html = "<" + tag + ">\n    <" + nt + " " + nt_attr + " > " + name + "\n    </" + vt + ">\n    " + separator + "\n    <" + vt + " " + vt_attr + " > " + value + "\n    </" + vt + ">\n</" + tag + ">";
    return html;
  };

  render_boolean_value = function(parts) {
    var access_key, html, id, key_str, name, tag_name;
    parts = parts || {};
    tag_name = parts.tag_name || 'div';
    id = parts.id || myutil.get_uuid();
    name = parts.name || id;
    access_key = parts.access_key || null;
    if (access_key) {
      key_str = " accessKey=\"" + access_key + "\" ";
    }
    return html = "<" + tag_name + " class=\"bool_checkbox\">\n  <label for=\"" + name + "\"> Unique file \n    <input type=\"checkbox\"\n        id=\"" + id + "\" name=\"" + name + "\"\n        " + class_str + "\n        " + key_str + "\n    >\n  </label>\n</" + tag_name + ">";
  };

  jkv = function() {
    var loc, str, t;
    str = 'li(id="#{id}" \'class\'="#{class}") \n    span.name #{name}\n    span.separator :\n    span.value #{value}';
    loc = {
      name: 'Name',
      value: 'Value',
      id: 'jkfdlsew',
      'class': 'what you class'
    };
    t = jade.compile(str, {
      pretty: true
    });
    return p(t(loc));
  };

  nk2li = function() {
    var jt, locals, opt, t;
    jt = 'h1(id="#{id}") This is the title\np  You said: every one die, #{how.way}\np  And the fucking #{name} tutorial not telling variable interpolation.\np\ni  end';
    locals = {
      how: {
        way: 'become old'
      },
      id: 'id-one',
      name: 'the mother fucker'
    };
    opt = {
      pretty: true
    };
    t = jade.compile(jt, opt);
    return p(t(locals));
  };

  p = console.log;

  check_simple_nv = function() {
    var input;
    input = {
      name: 'IamJohn',
      value: 'IamBoss'
    };
    return p(render_name_value(input));
  };

  check_nv_opt = function() {
    var input;
    input = {
      tag: 'div',
      name: 'IamJohn',
      name_tag_id: 'i-am-name',
      name_tag_attr: 'data-name="name"',
      value: 'IamBoss'
    };
    return p(render_name_value(input));
  };

  if (require.main === module) {
    check_nv_opt();
  }

}).call(this);
