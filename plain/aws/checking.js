// Generated by CoffeeScript 1.8.0
(function() {
  var afile, argv, async, bucket, checking, do_some_stupid, fappend, file_meta_with_opt, folder_meta_show_array, folder_meta_without_array_of_names, get_file_uuid, p, path, read_json_from_s3, s3folder, show_file_info, show_folder_meta, show_folder_meta_with_options, show_it_only, show_it_without, stop, tools, u;

  u = require('underscore');

  path = require('path');

  async = require('async');

  argv = require("yargs").argv;

  bucket = require('./bucket.js');

  s3folder = require('./folder-v5.js');

  tools = require('./tools-cof.js');

  stop = function(time) {
    time = time || 500;
    return setTimeout(process.exit, time);
  };

  p = console.log;

  fappend = require('../myutils/mylogb.js').append_file;

  afile = '/tmp/a9.log';

  show_folder_meta = function(folder_path, callback) {
    return s3folder.retrieve_folder(folder_path).then(function(folder) {
      var meta;
      meta = folder.get_meta();
      console.log(meta);
      return callback();
    });
  };

  show_folder_meta_with_options = function(_path, argv, callback) {
    var opt;
    opt = argv._;
    return s3folder.retrieve_folder(_path).then(function(folder) {
      var meta;
      meta = folder.get_meta();
      if (argv.without) {
        show_it_without(meta, opt);
      } else if (argv.only) {
        show_it_only(meta, opt);
      } else {
        p(meta);
      }
      return stop();
    });
  };

  file_meta_with_opt = function(file_path, argv) {
    var opt;
    opt = argv._;
    return s3folder.get_file_meta_by_path(file_path).then(function(meta_list) {
      if (argv.without) {
        meta_list.forEach(function(meta) {
          return show_it_without(meta, opt);
        });
      } else if (argv.only) {
        meta_list.forEach(function(meta) {
          return show_it_only(meta, opt);
        });
      } else {
        p(meta_list);
      }
      return stop();
    });
  };

  show_file_info = function(file_path, argv_, callback) {
    var dirname, filename, keep;
    p('argv got: \n', argv_);
    dirname = path.dirname(file_path);
    filename = path.basename(file_path);
    keep = function(element) {
      var name, names, _i, _len, _meta;
      names = argv_._;
      if (u.isEmpty(names)) {
        return element;
      }
      _meta = {};
      for (_i = 0, _len = names.length; _i < _len; _i++) {
        name = names[_i];
        _meta[name] = element[name];
      }
      return _meta;
    };
    return s3folder.get_file_meta_by_path(file_path).then(function(meta_list) {
      var _m;
      p(111, err, meta_list);
      _m = meta_list.map(keep);
      p(_m);
      return stop();
    });
  };

  get_file_uuid = function(argv_, callback) {
    if (u.isEmpty(argv_)) {
      return console.log('empty parameters');
    }
    if (!u.isArray(argv_)) {
      return console.log('parameter not array');
    }
    return async.map(argv_, function(file_path) {
      var dirname, filename;
      dirname = path.dirname(file_path);
      filename = path.basename(file_path);
      return s3folder.retrieve_folder_meta(dirname, function(err, _meta) {
        return console.log(err, _meta);
      });
    });
  };

  read_json_from_s3 = function(s3key, callback) {
    return bucket.read_json(s3key, function(err, obj) {
      console.log(err, obj);
      return callback();
    });
  };

  folder_meta_without_array_of_names = function(folder_path, name_array, callback) {
    if (!u.isArray(name_array)) {
      console.log('NOT ARRAY');
      return null;
    }
    return s3folder.retrieve_folder(folder_path, function(err, folder_obj) {
      var folder_meta, name, _i, _len;
      if (err) {
        callback(err, null);
      }
      folder_meta = folder_obj.get_meta();
      for (_i = 0, _len = name_array.length; _i < _len; _i++) {
        name = name_array[_i];
        if (folder_meta[name] !== 'undefined') {
          delete folder_meta[name];
        }
      }
      return callback(null, folder_meta);
    });
  };

  folder_meta_show_array = function(folder_path, name_array, callback) {
    if (!u.isArray(name_array)) {
      console.log('NOT ARRAY: ' + name_array);
      return null;
    }
    return s3folder.retrieve_folder(folder_path).then(function(folder_obj) {
      var folder_meta, name, to_show, _i, _len;
      folder_meta = folder_obj.get_meta();
      to_show = {};
      for (_i = 0, _len = name_array.length; _i < _len; _i++) {
        name = name_array[_i];
        if (folder_meta[name] !== 'undefined') {
          to_show[name] = folder_meta[name];
        }
      }
      if (callback) {
        return callback(to_show);
      }
    });
  };

  show_it_without = function(obj, names) {
    var i, show;
    show = {};
    u.defaults(show, obj);
    if (u.isArray(names)) {
      u.each(names, function(name) {
        return delete show[name];
      });
      return console.log(show);
    }
    i = 1;
    while (i < arguments.length) {
      delete show[arguments[i]];
      i++;
    }
    return console.log(show);
  };

  show_it_only = function(obj, names) {
    var i, show;
    show = {};
    if (u.isArray(names)) {
      u.each(names, function(name) {
        if (obj[name] != null) {
          return show[name] = obj[name];
        }
      });
      return console.log(show);
    }
    i = 1;
    while (i < arguments.length) {
      if (obj[arguments[i]] != null) {
        show[arguments[i]] = obj[arguments[i]];
      }
      i++;
    }
    return console.log(show);
  };

  do_some_stupid = function(what) {
    console.log("Can not understand the command: " + what + "\n");
    return tools.exit();
  };

  checking = function() {
    var argv_, cmd, key, path_;
    cmd = argv.cmd;
    argv_ = argv._;
    path_ = argv['path'];
    key = argv.key;
    if (u.isBoolean(argv.i)) {
      argv.only = argv.i;
    }
    if (u.isBoolean(argv.x)) {
      argv.without = argv.x;
    }
    switch (cmd) {
      case 'show-folder-meta':
        return show_folder_meta_with_options(path_, argv, tools.exit);
      case 'show-file-meta':
        return file_meta_with_opt(path_, argv);
      case 'show-file-info':
        return show_file_info(path_, argv, tools.exit);
      case 'get-file-uuid':
        return get_file_uuid(argv_, tools.exit);
      case 'read-json-from-s3':
        return read_json_from_s3(key, tools.exit);
      case 'deep-folder-info':
        return deep_folder_info(path_, argv);
      default:
        return do_some_stupid(cmd);
    }
  };

  if (require.main === module) {
    checking();
  }

}).call(this);
