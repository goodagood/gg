// Generated by CoffeeScript 1.8.0
(function() {
  var Members_file_name, Promise, Viewers_file_name, async, bucket, check_delete, check_init_folder, check_init_member_f, check_reset, check_show_the_file, fs, make_members_obj, p, promised_member_obj, retrieve_member_obj, s3folder, stop, test_folder_name, test_member_file_exists, u, _test_folder_name;

  u = require("underscore");

  fs = require("fs");

  Promise = require("bluebird");

  async = require("async");

  s3folder = require("./folder-v5.js");

  bucket = require("./bucket.js");

  p = console.log;

  stop = function() {
    return setTimeout(process.exit, 500);
  };

  Members_file_name = '.gg.members.json';

  Viewers_file_name = '.gg.viewers.json';

  make_members_obj = function(Dir) {
    var Folder, add_member, add_viewer, check_members_file_exists, check_user_role, del_member, delete_file, empty_content, folder_initialized, get_file_obj, get_json, get_number_of_member_file, get_text, has_member, has_viewer, init_folder, init_members_file, is_owner, keep_only_one_member_file, promise_to_write_file, reset_members_file, show_folder, show_members_file, write_file, _obj_;
    Folder = null;
    empty_content = {
      members: [],
      viewers: []
    };
    init_folder = function() {
      return s3folder.retrieve_folder(Dir).then(function(folder) {
        Folder = folder;
        return Folder;
      });
    };
    folder_initialized = function() {
      if (u.isNull(Folder)) {
        return false;
      }
      return true;
    };
    show_folder = function() {
      p('folder object in "make members obj", Dir: ' + Dir);
      return p(Folder);
    };
    init_members_file = function() {
      var content, text;
      content = {
        members: [],
        viewers: []
      };
      text = JSON.stringify(content);
      if (Folder === null) {
        throw 'have no folder object in "init members file exists"';
      }
      return check_members_file_exists().then(function(exists) {
        if (exists) {
          return Promise.reject('member file already exists');
        }
        return Folder.write_text_file(Members_file_name, text);
      });
    };
    reset_members_file = function() {
      return promise_to_write_file(empty_content);
    };
    get_file_obj = function() {
      return Folder.promise_to_one_file_obj(Members_file_name).then(function(file) {
        return file;
      });
    };
    write_file = function(json, callback) {
      var text;
      text = JSON.stringify(json);
      return get_file_obj().then(function(file) {
        var meta;
        meta = file.get_meta();
        return bucket.write_text_file(meta.storage.key, text, function(err, reply) {
          meta.timestamp = Date.now();
          meta.lastModifiedDate = Date.now();
          return Folder.add_file_save_folder(meta, callback);
        });
      });
    };
    promise_to_write_file = Promise.promisify(write_file);
    add_member = function(name) {
      return get_json().then(function(j) {
        if (j.members.indexOf(name) < 0) {
          j.members.push(name);
        }
        return j;
      }).then(function(j) {
        return write_file(j);
      });
    };
    add_viewer = function(name) {
      return get_json().then(function(j) {
        if (j.members.indexOf(name) < 0) {
          j.viewers.push(name);
        }
        return j;
      }).then(function(j) {
        return write_file(j);
      });
    };
    del_member = function(name) {
      return get_json().then(function(j) {
        var ind;
        ind = j.members.indexOf(name);
        p('in del member, index to delete:\n', ind);
        if (ind < 0) {
          return j;
        }
        j.members.splice(ind, 1);
        p('in del member, after delete:\n', j);
        return j;
      }).then(function(j) {
        return write_file(j);
      });
    };
    has_member = function(name) {
      return get_json().then(function(j) {
        if (j.members.indexOf(name) < 0) {
          return false;
        } else {
          return true;
        }
      });
    };
    check_members_file_exists = function() {
      var exists;
      if (Folder === null) {
        throw 'have no folder object in "check members file exists"';
      }
      exists = Folder.file_exists(Members_file_name);
      return Promise.resolve(exists);
    };
    delete_file = function() {
      var folder_;
      folder_ = null;
      return s3folder.retrieve_promisified_folder(Dir).then(function(folder) {
        folder_ = folder;
        return folder.get_uuids(Members_file_name);
      }).then(function(uuid_list) {
        p('the list in "delete file": \n', uuid_list);
        if (u.isArray(uuid_list)) {
          if (uuid_list.length >= 1) {
            return folder_.delete_uuid_promised(uuid_list[0]);
          }
        }
        return Promise.resolve('nothing deleted');
      });
    };
    get_number_of_member_file = function() {
      var uuid_list;
      uuid_list = Folder.get_uuids(Members_file_name);
      if (!u.isArray(uuid_list)) {
        throw 'not a list in "get number of member file"';
      }
      return uuid_list.length;
    };
    keep_only_one_member_file = function() {
      return s3folder.retrieve_folder(Dir).then(function(folder) {
        return folder.get_uuids(Members_file_name);
      }).then(function(uuid_list) {
        var counts, funs, len, size, tool, _i, _j, _results, _results1;
        p('the list: \n', uuid_list);
        if (!u.isArray(uuid_list)) {
          return Promise.resolve('not a list in "keep only one mem.."');
        }
        len = uuid_list.length;
        if (len > 1) {
          size = len - 1;
          counts = (function() {
            _results = [];
            for (var _i = 1; 1 <= size ? _i <= size : _i >= size; 1 <= size ? _i++ : _i--){ _results.push(_i); }
            return _results;
          }).apply(this);
          tool = require("../myutils/test-util.js");
          funs = (function() {
            _results1 = [];
            for (var _j = 2; 2 <= len ? _j <= len : _j >= len; 2 <= len ? _j++ : _j--){ _results1.push(_j); }
            return _results1;
          }).apply(this).map(function(num) {
            return tool.promise_to_sleep(15).then(function() {
              return delete_file();
            }).then(function(what) {
              return callback(null, what);
            });
          });
          p('funs: ', funs);
          return async.series(funs);
        }
      });
    };
    get_text = function() {
      if (!Folder) {
        throw 'no folder? when "get text"';
      }
      return Folder.read_text_file(Members_file_name);
    };
    get_json = function() {
      return get_text().then(function(text) {
        var json;
        return json = JSON.parse(text);
      });
    };
    show_members_file = function() {
      return s3folder.retrieve_folder(Dir).then(function(folder) {
        return folder.read_text_file(Members_file_name);
      }).then(function(str) {
        p('The file contents:\n', str);
        return str;
      });
    };
    is_owner = function(name) {
      var right;
      right = Folder.is_owner(name);
      return Promise.resolve(right);
    };
    has_viewer = function(viewer_name) {
      return get_json().then(function(j) {
        if (j.viewers.indexOf('*') > 0) {
          return true;
        }
        if (j.viewers.indexOf(viewer_name) < 0) {
          return false;
        } else {
          return true;
        }
      });
    };
    check_user_role = function(name, callback) {
      var Determined;
      Determined = false;
      return is_owner(name).then(function(is_owner) {
        if (is_owner) {
          Determined = true;
          return callback(null, 'owner');
        }
      }).then(function(what) {
        if (Determined) {
          return Determined;
        } else {
          return has_member(name);
        }
      }).then(function(has_member) {
        if (Determined) {
          return Determined;
        }
        if (has_member) {
          Determined = true;
          return callback(null, 'member');
        }
      }).then(function(what) {
        if (Determined) {
          return Determined;
        }
        return has_viewer(name);
      }).then(function(has_viewer) {
        if (Determined) {
          return Determined;
        }
        if (has_viewer) {
          Determined = true;
          return callback(null, 'viewer');
        }
      }).then(function(what) {
        if (Determined) {
          return Determined;
        }
        if (!Determined) {
          return callback(null, 'who-known');
        }
      });
    };
    _obj_ = {
      folder: Folder,
      init_folder: init_folder,
      folder_initialized: folder_initialized,
      init_members_file: init_members_file,
      show_members_file: show_members_file,
      check_members_file_exists: check_members_file_exists,
      get_number_of_member_file: get_number_of_member_file,
      is_owner: is_owner,
      has_viewer: has_viewer,
      add_viewer: add_viewer,
      keep_only_one_member_file: keep_only_one_member_file,
      delete_file: delete_file,
      get_json: get_json,
      add_member: add_member,
      del_member: del_member,
      get_file_obj: get_file_obj,
      has_member: has_member,
      check_user_role: check_user_role,
      reset_members_file: reset_members_file,
      show_folder: show_folder
    };
    return _obj_;
  };

  promised_member_obj = function(dir) {
    var obj;
    obj = make_members_obj(dir);
    return Promise.resolve(obj);
  };

  retrieve_member_obj = function(dir) {
    var Member_obj;
    Member_obj = null;
    return promised_member_obj(dir).then(function(obj) {
      Member_obj = obj;
      return Member_obj.init_folder();
    }).then(function(folder) {
      return Member_obj;
    });
  };

  module.exports.make_members_obj = make_members_obj;

  module.exports.promised_member_obj = promised_member_obj;

  module.exports.retrieve_member_obj = retrieve_member_obj;

  p = console.log;

  stop = function() {
    return setTimeout(process.exit, 500);
  };

  test_folder_name = 'abc';

  _test_folder_name = 'abc';

  check_show_the_file = function(dir) {
    var Mobj;
    dir = dir || test_folder_name;
    Mobj = null;
    return retrieve_member_obj(dir).then(function(mobj) {
      Mobj = mobj;
      return mobj.check_members_file_exists();
    }).then(function(exists) {
      p("exists: " + exists);
      if (!exists) {
        throw 'members file not exists';
      }
    }).then(function() {
      return Mobj.show_members_file();
    }).then(stop);
  };

  check_init_folder = function(dir) {
    return promised_member_obj(dir).then(function(mobj) {
      p('1 member object: ', mobj);
      return mobj;
    }).then(function(mobj) {
      return mobj.init_folder();
    }).then(function(folder) {
      p('3 folder:');
      return folder;
    }).then(function(f) {
      var fm;
      fm = f.get_meta();
      p('name: ', fm.name);
      return p('uuid: ', fm.uuid);
    }).then(stop);
  };

  test_member_file_exists = function(dir) {
    dir = dir || test_folder_name;
    return retrieve_member_obj(dir).then(function(mobj) {
      return mobj.check_members_file_exists();
    }).then(function(exists) {
      return p("exists: " + exists);
    }).then(stop);
  };

  check_init_member_f = function(dir) {
    var member_obj;
    dir = dir || test_folder_name;
    member_obj = null;
    return retrieve_member_obj(dir).then(function(mobj) {
      member_obj = mobj;
      return mobj.init_members_file();
    }).then(function(what) {
      return p('you got what: ', what);
    }).then(function() {
      return member_obj.check_members_file_exists();
    }).then(function(exists) {
      return p("exists: " + exists);
    }).then(stop);
  };

  check_delete = function(dir) {
    var member_obj;
    dir = dir || test_folder_name;
    member_obj = null;
    return retrieve_member_obj(dir).then(function(obj) {
      member_obj = obj;
      return obj.delete_file();
    }).then(function(what) {
      return p(1, ' ', what);
    }).then(function() {
      return stop();
    });
  };

  check_reset = function(dir) {
    var member_obj;
    dir = dir || test_folder_name;
    member_obj = null;
    return retrieve_member_obj(dir).then(function(mobj) {
      member_obj = mobj;
      return mobj.reset_members_file();
    }).then(function(what) {
      return p('you got what in "check reset": ', what);
    }).then(stop);
  };

  if (require.main === module) {
    check_reset();
  }

}).call(this);
