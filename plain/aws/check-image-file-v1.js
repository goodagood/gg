// Generated by CoffeeScript 1.8.0
(function() {
  var check_a_image_file, collector, fs, image_file, p, path, s3folder, simple_file, step_by_step, stop;

  path = require("path");

  fs = require("fs");

  simple_file = require("./simple-file-v1.js");

  image_file = require("./image-file-v1.js");

  s3folder = require('./folder-v1.js');

  collector = require('./file-collector.js');

  p = console.log;

  stop = function(time) {
    time = time || 500;
    return setTimeout(process.exit, time);
  };

  check_a_image_file = function() {
    var file_path, meta, _meta;
    _meta = {
      local_file: "/home/ubuntu/tmp/Uruguay-OKs-Plan.jpg",
      name: "ub.jpg",
      dir: "abc",
      owner: "abc"
    };
    _meta.path = path.join(_meta.dir, _meta.name);
    meta = simple_file.fix_file_meta(_meta);
    file_path = meta.local_file;
    p(meta);
    return stop();
  };

  step_by_step = function() {
    var file_path, folder_path, meta, username, _meta;
    p('step by step');
    _meta = {
      local_file: "/home/ubuntu/tmp/Uruguay-OKs-Plan.jpg",
      name: "ub.jpg",
      dir: "abc",
      owner: "abc"
    };
    _meta.path = path.join(_meta.dir, _meta.name);
    meta = simple_file.fix_file_meta(_meta);
    file_path = meta.local_file;
    folder_path = _meta.dir;
    username = _meta.owner;
    p('start to put the local file to s3');
    return simple_file.put_local_file_without_pass(file_path, meta, function(err, json) {
      fs.writeFile('/tmp/imeta.json', JSON.stringify(meta, null, 4));
      p(meta);
      s3folder.retrieve_folder(folder_path, function(err, folder_obj) {
        if (!folder_obj) {
          return callback('not folder object', null);
        }
        p('here 12');
        image_file.image_from_meta(meta).then(function(iobj) {
          var file_meta;
          p('iobj');
          file_meta = iobj.get_meta();
          fs.writeFile('/tmp/i2meta.json', JSON.stringify(file_meta, null, 4));
          return collector.add_file_the_old_way(username, file_meta, folder_path, folder_obj, function(err, user) {});
        })["catch"](function(err) {
          p('err');
          return p(err);
        });
        return stop();
      });
      return p('here 11');
    });
  };

  step_by_step();

}).call(this);
