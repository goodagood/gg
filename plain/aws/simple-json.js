// Generated by CoffeeScript 1.8.0

/*
 * Try to make json file object not based on text file, make it a little
 * easier to read/write json file, which can serve as configuration files.
 *
 * change 0105, 
 *   the new json file is quite different from the old, which use text file.
 *
 *
 * json file type till not added to s3-file-types.js, 0225, added 0318
 * read_as_json_file can be used
 * read_json_file    currently linked to read_as_json_file
 *
 */

(function() {
  var Promise, assert, check_make_json_file, check_read_a_json, check_read_json, check_write_json, file_module, folder_module, make_json_file, myconfig, new_json_file_from_meta, new_json_file_obj, p, path, promise_to_new_json_file_obj, read_as_json_file, read_json_file, show_json_file, stop, test_file_name, test_file_path, test_folder_name, test_json_file_name, test_owner_name, u, write_a_text_file, write_json_file_as_text;

  path = require('path');

  u = require('underscore');

  assert = require('assert');

  Promise = require('bluebird');

  myconfig = require("../config/config.js");

  file_module = require("./simple-file-v3.js");

  folder_module = require("./folder-v5.js");

  p = console.log;

  new_json_file_obj = function(file_meta, callback) {
    var Err, Json, Meta, Obj, get_json, set_json;
    Meta = file_meta;
    Err = null;
    Obj = {};
    Json = null;
    set_json = function(json) {
      return Json = json;
    };
    get_json = function() {
      return Json;
    };
    return file_module.simple_s3_file_obj(Meta, function(err, fobj) {
      var get_attribute, retrieve_json, set_attribute, update_json;
      if (err) {
        return callback(err, fobj);
      }
      u.defaults(Obj, fobj);
      retrieve_json = function(callback) {
        return Obj.read_to_string(function(err, str) {
          var jerr;
          if (err) {
            return callback(err, null);
          }
          Json = null;
          try {
            Json = JSON.parse(str);
          } catch (_error) {
            jerr = _error;
            return callback(jerr, null);
          }
          return callback(null, Json);
        });
      };
      update_json = function(json, callback) {
        var text;
        Json = json;
        text = JSON.stringify(json);
        return Obj.write_s3_storage(text, callback);
      };
      set_attribute = function(name, value, callback) {
        Json[name] = value;
        return update_json(Json, callback);
      };
      get_attribute = function(name) {
        if (Json[name] != null) {
          return Json[name];
        }
        return null;
      };
      Obj.version = 'simple-json.coffee';
      Obj.update_json = update_json;
      Obj.set_json = set_json;
      Obj.get_json = get_json;
      Obj.retrieve_json = retrieve_json;
      Obj.set_attribute = set_attribute;
      Obj.get_attribute = get_attribute;
      return callback(null, Obj);
    });
  };

  promise_to_new_json_file_obj = Promise.promisify(new_json_file_obj);

  new_json_file_from_meta = function(meta, callback) {
    return new_json_file_obj(meta, function(err, jfile) {
      jfile.calculate_meta_defaults();
      jfile.render_html_repr();
      return jfile.save_file_to_folder().then(function(what) {
        return callback(err, jfile);
      })["catch"](callback);
    });
  };

  make_json_file = function(json, user_name, file_path, callback) {
    var basename, dirname, meta;
    dirname = path.dirname(file_path);
    basename = path.basename(file_path);
    meta = {};
    meta.owner = user_name;
    meta.path = file_path;
    meta.name = basename;
    meta.dir = dirname;
    return new_json_file_obj(meta, function(err, file) {
      var key, meta_;
      if (err) {
        return callback(err, file);
      }
      file.calculate_meta_defaults();
      meta_ = file.get_meta();
      assert(meta_ === meta, "just calculate defaults, thing they are equal");
      if (u.isEmpty(meta_.storage)) {
        key = path.join(myconfig.raw_file_prefix, meta_.dir, meta_.uuid);
        meta_.storage = {
          type: 's3',
          key: key
        };
      }
      return file.update_json(json, function(err, reply) {
        if (err) {
          return callback(err, reply);
        }
        file.render_html_repr();
        return file.save_file_to_folder().then(function(what) {
          return callback(null, file);
        })["catch"](callback);
      });
    });
  };

  write_json_file_as_text = function(owner, dir, filename, json) {
    var text;
    text = JSON.stringify(json, null, 4);
    return file_module.write_text_file(owner, dir, filename, text);
  };

  read_as_json_file = function(full_path, callback) {
    var dir, filename;
    dir = path.dirname(full_path);
    filename = path.basename(full_path);
    return folder_module.retrieve_folder(dir).then(function(folder) {
      return folder.read_recent_file_by_name(filename, function(err, str) {
        var j, jerr;
        j = null;
        try {
          j = JSON.parse(str);
        } catch (_error) {
          jerr = _error;
          return callback(jerr, str);
        }
        return callback(null, j);
      });
    });
  };

  read_json_file = function(full_path, callback) {
    var dir, filename;
    dir = path.dirname(full_path);
    filename = path.basename(full_path);
    return folder_module.retrieve_folder(dir).then(function(folder) {
      return folder.get_recent_file_by_name(filename, function(err, obj) {
        if (err) {
          return callback(err, obj);
        }
        return obj.retrieve_json(function(err, json) {
          if (err) {
            return callback(err, json);
          }
          return callback(null, json);
        });
      });
    });
  };

  module.exports.new_json_file_obj = new_json_file_obj;

  module.exports.make_json_file = make_json_file;

  module.exports.write_json_file_as_text = write_json_file_as_text;

  module.exports.read_as_json_file = read_as_json_file;

  module.exports.read_json_file = read_json_file;

  module.exports.new_json_file_from_meta = new_json_file_from_meta;

  p = console.log;

  stop = function() {
    return setTimeout(process.exit, 500);
  };

  test_owner_name = 'abc';

  test_folder_name = 'abc';

  test_file_path = 'abc/ta.json';

  test_json_file_name = 'test.json';

  test_file_name = 'txt25';

  write_a_text_file = function() {
    var F, dir, name, owner, text;
    owner = test_owner_name;
    dir = test_folder_name;
    name = test_file_name;
    text = "\nI am checking\na new plain\nfile\n";
    F = null;
    return write_text_file(owner, dir, name, text).then(function(what) {
      return p('what: ', what);
    }).then(stop);
  };

  check_write_json = function(filename) {
    var dir, j, username;
    filename = filename || 'test.json';
    username = test_owner_name;
    dir = 'abc';
    j = {
      a: 1,
      b: 2,
      c: {
        ca: 'a in c',
        cb: 'b in c',
        ar: [1, 2, 3]
      }
    };
    return write_json_file_as_text(username, dir, filename, j).then(function(what) {
      p('what: ', what);
      return p('check if it wrote');
    }).then(stop);
  };

  check_read_json = function(filename) {
    filename = filename || 'abc/test/j.json';
    return read_as_json_file(filename, function(err, j) {
      p('err,str:', err, j);
      return read_json_file(filename, function(err, j2) {
        p('2, err,str:', err, j2);
        return stop();
      });
    });
  };

  check_make_json_file = function() {
    var test_json;
    test_json = {
      "what": "I am testing, 0105",
      "date": new Date(),
      "ok": true
    };
    return make_json_file(test_json, test_owner_name, test_file_path, function(err, what) {
      p("In 'check make json file' \n", err, what);
      return stop();
    });
  };

  show_json_file = function(file_path) {
    file_path = file_path || 'abc/test/.todo.json';
    return folder_module.retrieve_file_objs(file_path, function(err, files) {
      var file, len;
      len = files.length;
      p('number: ', len);
      assert(len > 0);
      file = files[0];
      return file.read_to_string(function(err, str) {
        p('json file string:\n', str);
        return stop();
      });
    });
  };

  check_read_a_json = function(file_path) {
    var filename;
    filename = filename || 'abc/test/json-txt.json';
    return read_json_file(filename, function(err, j2) {
      p('2, err,str:', err, j2);
      return stop();
    });
  };

  if (require.main === module) {
    check_read_a_json();
  }

}).call(this);
