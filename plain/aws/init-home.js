// Generated by CoffeeScript 1.8.0
(function() {
  var assert, async, check_home_folder, check_init_one_home, find_name_home, folder_module, init_home_folder_12_18, init_many_home, init_one_home, myconfig, myuser, p, path, people, show_name_tangle, stop, u, user;

  u = require("underscore");

  path = require("path");

  assert = require("assert");

  async = require("async");

  folder_module = require("./folder-v5.js");

  myconfig = require("../config/config.js");

  user = require('../users/a.js');

  people = require("../users/people.js");

  myuser = require('../myuser.js');

  p = console.log;

  stop = function(seconds) {
    var milli_sec;
    seconds = seconds || 1;
    milli_sec = seconds * 1000;
    return setTimeout(process.exit, milli_sec);
  };

  init_home_folder_12_18 = function(username) {
    var Goodagood, Home, folder_opt, s3key;
    s3key = path.join(myconfig.meta_file_prefix, username);
    folder_opt = {};
    folder_opt['path'] = username;
    folder_opt['name'] = username;
    folder_opt['parent-dir'] = '';
    folder_opt.owner = username;
    folder_opt.permission = {
      owner: 'rwx',
      other: '',
      group: ''
    };
    folder_opt['create-timestamp'] = Date.now();
    folder_opt['timestamp'] = Date.now();
    Home = null;
    Goodagood = null;
    return folder_module.build_new_folder(folder_opt).then(function(folder) {
      Home = folder;
      return Home.add_folder('goodagood');
    }).then(function(g) {
      var gm;
      Goodagood = g;
      gm = g.get_meta();
      return Goodagood.add_folder('message');
    }).then(function(msg) {
      return Goodagood.add_folder('etc');
    }).then(function() {
      return Goodagood.promise_to_list_files_and_save();
    }).then(function() {
      return Home.add_folder('public');
    }).then(function() {
      return Home.promise_to_list_files_and_save();
    });
  };

  init_one_home = function(username) {
    username = username || 'aa';
    return init_home_folder_12_18(username).then(function(what) {
      return people.promise_to_init_people_manager(username);
    });
  };

  find_name_home = function(username, callback) {
    var Meta;
    Meta = null;
    return myuser.is_name_occupied(username, function(err, occupied) {
      if (!occupied) {
        console.log("user name, " + username + ", not exist?");
      }
      if (!occupied) {
        return callback("user name, " + username + ", not exist?", null);
      }
      return folder_module.is_folder_exists(username, function(err, exists) {
        if (!exists) {
          console.log("user, " + username + ", home folder not exist?");
        }
        if (!exists) {
          return callback("user, " + username + ", home folder not exist?", null);
        }
        return folder_module.retrieve_folder(username).then(function(folder) {
          var smell;
          Meta = folder.get_meta();
          smell = 0;
          if (!Meta.name) {
            smell += 1;
          }
          if (!Meta.path) {
            smell += 1;
          }
          if (Meta.renders == null) {
            smell += 1;
          }
          if (Meta.files == null) {
            smell += 1;
          }
          if (Meta.uuid == null) {
            smell += 1;
          }
          if (Meta.error) {
            smell += 1;
          }
          err = smell > 0 ? 'something wrong' : null;
          return callback(err, folder);
        });
      });
    });
  };

  show_name_tangle = function(meta) {
    p("meta.meta_s3key " + meta.path);
    return p("meta.folder_meta_s3key " + meta.path);
  };

  check_home_folder = function(username) {
    var Home;
    Home = null;
    return find_name_home(username, function(err, folder) {
      var Err, name;
      p("got " + username + "'s home folder, err? : ", err);
      if (err) {
        stop();
      }
      Home = folder;
      Err = null;
      name = path.join(username, 'goodagood');
      return folder_module.is_folder_exists(name, function(err, yes_) {
        var etc, msg;
        if (!yes_) {
          return Err = err;
        }
        p("folder: " + name + " exists.");
        msg = path.join(name, 'message');
        folder_module.is_folder_exists(msg, function(err, yes_) {
          if (!yes_) {
            return Err = err;
          }
          return p("folder: " + msg + " exists.");
        });
        etc = path.join(name, 'etc');
        return folder_module.is_folder_exists(etc, function(err, yes_) {
          if (!yes_) {
            return Err = err;
          }
          return p("folder: " + etc + " exists.");
        });
      });
    }, stop(10));
  };

  module.exports.init_home_folder = init_home_folder_12_18;

  module.exports.init_one_home = init_one_home;

  check_init_one_home = function(username) {
    username = username || 'ab';
    return init_one_home(username).then(function() {
      return stop();
    });
  };

  user = require("../users/a.js");

  init_many_home = function(include, exclude) {
    include = include || [];
    exclude = exclude || [];
    return user.get_user_names(function(err, names) {
      var fun_list, list;
      assert(u.isArray(names));
      list = u.union(names, include);
      list = u.difference(list, exclude);
      list = u.uniq(list);
      fun_list = list.map(function(name) {
        var fun;
        fun = function(callback) {
          return init_one_home(name).then(function(what) {
            return callback(null, what);
          });
        };
        return fun;
      });
      return async.series(fun_list, function() {
        return stop();
      });
    });
  };

  if (require.main === module) {
    check_home_folder('tmpab');
  }

}).call(this);
