// 0525, routes to list files
//
//var passport = require('passport')
var util = require('util');
var path = require('path');
var markdown = require('markdown').markdown;

var myuser = require('../myuser.js');
var tv = require('../myutils/tv.js');  // for tree views 
var myutil = require('../myutils/myutil.js');

var cel = require('connect-ensure-login');

var myconfig = require('../config-mj.js');
var bucket   = require('../aws/bucket.js');
var meta     = require('../aws/meta.js');

var s3folder = require('../aws/folder.js');
var deliver  = require('../aws/file-deliver.js');

function list(app){

  ///* show only folders, not going to use after 2014 0530 */
  //app.get(/\/treeview\/(.*)/,
  //  cel.ensureLoggedIn('/login'),
  //  function(req, res, next){
  //    var cwd = req.params[0];
  //    var username = req.user.username;
  //    if (typeof username === 'undefined' || !username){
  //      res.end('Not found username'); next();
  //    }

  //    bucket.read_home_structure(username, function(err, tree_obj){
  //      if (err){ res.end('Read file error'); next(); }

  //      var checkout = myutil.check_out_cwd_tree(cwd, tree_obj);
  //      var user_folder_ul = tv.folder_to_ul(checkout.tree, checkout.cwd);
  //      var cwd_chain = make_cwd_chain(checkout.cwd);
  //      res.render('treeview', {cwd_chain:cwd_chain, user_folder_ul:user_folder_ul});

  //    });
  //  });

  // before 0529, already be replaced by list2, which is also replaced.
  app.get(/^\/list\/(.+)/, 
    cel.ensureLoggedIn('/login'),
    function(req, res, next){
      //res.end('testing s'); next();
      //console.log(11); console.log((req.params[0]));
      var path  = req.params[0],
          username = req.user.username;
      if (! check_path_username_agree(path, username)){
        res.end("<h1> Are you sure you are " + username + " </h1>");
      }

      ///
      var user_clone = JSON.parse(JSON.stringify(req.user));
      //delete user_clone.password;
      //var user_folder_ul = tv.make_ul_list(user_clone);


      bucket.list(path, function(err, data){

        //console.log(data);
        var html_ul = tv.make_ul_from_listObjects(data);
        //res.end('testing'); next();
        //console.log('obj user: ', user_clone);
        res.render('list-a', 
          {user:user_clone, 
            path: path,
            user_folder_ul:html_ul});
      });

    });



  // this is testing 0613, to let user select and send files
  app.get(/^\/list3\/(.*)/, 
    cel.ensureLoggedIn('/login'),
    function(req, res, next){
      //res.end('testing s'); next();
      //console.log(0529-1); console.log((req.params[0]));
      var cwd  = req.params[0];
      var username = req.user.username;

      // todo : make a list of files plus folders.
      bucket.list3(username, cwd, function(err, data){

        var cwd_chain = path_chain(cwd, '/list3/');  // '/list2/' is start of the href

        //console.log(data);
        //var html_ul = tv.make_ul_from_listObjects(data);
        //res.end('testing'); next();
        res.render('list3', 
          {user:req.user, 
            username: req.user.username,
            cwd:cwd,
            cwd_chain: cwd_chain,
            user_folder_ul:data});
      });

    });


  // 0629, after file and folder changed to new meta data.
  app.get(/^\/ls\/(.*)/, 
    cel.ensureLoggedIn('/login'),
    function(req, res, next){
      //res.end('testing s'); next();
      //console.log(0529-1); console.log((req.params[0]));
      var cwd  = req.params[0];
      var username = req.user.username;

      s3folder.retrieve_folder(cwd, function(folder){
        var cwd_chain = path_chain(cwd, '/ls/');  // '/ls/' is start of the href
        var ul = folder.get_ul_renderring();

        res.render('ls', 
          {user:req.user, 
            username: req.user.username,
            cwd:cwd,
            cwd_chain: cwd_chain,
            user_folder_ul : ul
          }
        );
      });

    });


  // 0725, what's the good way to do UI?
  app.get(/^\/message\/(.*)/, 
    cel.ensureLoggedIn('/login'),
    function(req, res, next){
      //res.end('testing s'); next();
      //console.log(0529-1); console.log((req.params[0]));
      var cwd  = req.params[0];
      var username = req.user.username;

      s3folder.retrieve_folder(cwd, function(folder){
        var cwd_chain = path_chain(cwd, '/ls/');  // '/ls/' is start of the href
        var ul = folder.get_ul_renderring();

        res.render('ls', 
          {user:req.user, 
            username: req.user.username,
            cwd:cwd,
            cwd_chain: cwd_chain,
            user_folder_ul : ul
          }
        );
      });

    });

  // this is testing 0613, to let user select and send files
  app.get(/^\/list-msg\/(.*)/, 
      //cel.ensureLoggedIn('/login'),
      function(req, res, next){
        var cwd  = req.params[0];
        console.log('cwd'); console.log(cwd);
        var username = req.user.username;
        if( typeof cwd === 'undefined' || !cwd ) cwd = path.join(username, 'goodagood/.in');
        console.log('cwd 2'); console.log(cwd);

        // todo : make a list of files plus folders.
        //bucket.list_msg_folder(username, cwd, function(err, data){
        meta.get_file_list_in_folder(cwd, function(err, data){

          var cwd_chain = path_chain(cwd, '/list-msg/');  // '/list2/' is start of the href

          //console.log(data);
          res.render('list3', 
            {user:req.user, 
              username: req.user.username,
            cwd:cwd,
            cwd_chain: cwd_chain,
            user_folder_ul:data});
        });

      });

  
  // do the sending file, get parameters from url query string.
  app.get('/testsend', 
    cel.ensureLoggedIn('/login'),
    function(req, res, next){
      console.log('\n testsend \n');
      console.log(req.query);
      var src = decodeURIComponent(req.query.src);
      var target_user = decodeURIComponent( req.query.targetuser);

      var target = path.join(target_user, 'goodagood/in');

      //console.log(src, '  ', target);
      deliver.copy_file(src, target);

      //res.send(JSON.stringify(req.query));
      res.json(req.query);
      next();
    });


  // add folder, 0529:
  app.get(/\/add-folder\/(.*)/,
    cel.ensureLoggedIn('/login'),
    function(req, res){
      //console.log(req.user);
      console.log("add-folder ...");
      console.log(req.user.username);

      // calculate current directory:
      var current_dir = req.params[0];
      var cwd_chain = path_chain(current_dir, '/list2/');

      console.log('current_dir');
      console.log(current_dir);

      res.render('add-folder', 
        { user: req.user, 
          message: req.flash('error'),
          current_dir: current_dir,
          cwd_chain:cwd_chain,
        });
  });


  app.post(/\/add-folder\/(.*)/, function(req, res){

    //console.log('add folder post...');

    var cwd = req.params[0];
    var username = req.user.username;
    var folder_name = req.body.folder_name;

    /// re-write:
    s3folder.retrieve_folder(cwd, function(current_dir_obj){
      current_dir_obj.add_folder(folder_name, function(new_folder){
        res.redirect('/ls/' + cwd);
      });
    });

    //res.redirect('/ls/' + cwd);

  });

  app.get(/\/view\/(.*)/, function(req, res, next){
    var file_path = req.params[0];
    var username = req.user.username;
    console.log('view-- ', file_path);

    //var ext = path.extname(file_path);
    //if( ext !== '.md' ) {res.end('not markdown file.'); next();}

    s3folder.retrieve_file_meta(file_path, function(meta){
      if(meta.storage.type === 'meta-text'){
        var text = meta.storage.text;
        var contents = markdown.toHTML(text);
        res.render('view', 
          { user: req.user, 
            message: req.flash('error'),
          contents: contents,
        });
        //next(); // I am not sure if 'next()' could stop running the rest.
      }
      if(meta.storage.type === 's3'){
        bucket.read_file(meta.storage.key, function(err, text){
          var contents = markdown.toHTML(text);
          res.render('view', 
            { user: req.user, 
              message: req.flash('error'),
            contents: contents,
          });
          //next(); // I am not sure if 'next()' could stop running the rest.
        });
      }

    });

    //res.render('view', 
    //  { user: req.user, 
    //    message: req.flash('error'),
    //  content: file_path,
    //});
  });

  // deprecated 0717.
  //app.post(/\/add-folder\/(.*)/, function(req, res){

  //  //console.log('add folder post...');

  //  var current_dir = req.params[0];
  //  //doing
  //  var username = req.user.username;
  //  bucket.read_home_structure(username, function(err, tree_obj){
  //    if (err){ res.end('Read file error'); next(); }

  //    var checkout = myutil.check_out_cwd_tree(current_dir, tree_obj);

  //    var folder_name = req.body.folder_name;
  //    if (! isBlank(folder_name)){
  //      // add a key of folder name to the tree structure
  //      checkout.tree[folder_name] = {};
  //      bucket.update_home_structure_file(username, tree_obj, function(err, obj){
  //        //console.log(tree_obj);
  //        res.redirect('/list2/'+username);
  //      });
  //    }

  //  });

  //  //res.redirect('/treeview/');
  //});


  //// new folder, test to replce add-folder
  //app.get(/\/new-folder\/(.*)/,
  //  cel.ensureLoggedIn('/login'),
  //  function(req, res){
  //    //console.log(req.user);
  //    console.log("new-folder ...");
  //    console.log(req.user.username);

  //    // calculate current directory:
  //    var current_dir = req.params[0];
  //    var cwd_chain = path_chain(current_dir, '/list3/');

  //    console.log('current_dir');
  //    console.log(current_dir);

  //    res.render('new-folder', 
  //      { user: req.user, 
  //        message: req.flash('error'),
  //        current_dir: current_dir,
  //        cwd_chain:cwd_chain,
  //      });
  //});


  // Deprecated 0717, new data structure for folder/file
  //// bucket.make_s3_pseudo_folder has been updated to write a folder 'file'. 
  //// 0620, make_s3_pseudo_folder is going to be replaced by init_folder_meta, 0622
  //app.post(/\/new-folder\/(.*)/, function(req, res){
  //  //console.log('new folder post...');

  //  var cwd = req.params[0];
  //  var username = req.user.username;

  //  var folder_opt = {
  //    what : myconfig.iamfolder,
  //    create_miliseconds: Date.now(),
  //    creator: username,
  //    owner:   username,
  //    permission : {
  //      owner : 'rwx',
  //      group : '',
  //      other : ''
  //    },
  //  };
  //  var folder_name = req.body.folder_name;
  //  if ( isBlank(folder_name)) res.redirect(path.join('/new-folder/', cwd));
  //  var folder_s3key = path.join(cwd, folder_name);
  //  bucket.init_folder_meta(folder_s3key, folder_opt);
  //  res.redirect(path.join('/list3/', cwd));

  //});


}


function isEmpty(str) {
      return (!str || 0 === str.length);
}


// For checking if a string is blank, null or undefined:
function isBlank(str) {
      return (!str || /^\s*$/.test(str));
}


function check_path_username_agree(path, username){
  // Because all user's home folder would be: username/
  // so, the path should starts from username, as: 'username/path/file/name...'
  if (path.indexOf(username) !== 0) return false;
  return true;
}


function path_chain(path_string, prefix){
    if (typeof path_string !== 'string') return;

    var parts = path_string.split('/');
    parts = parts.filter(function(e){return e !== '';}); //no empty ''

    var all_path = [];
    var tmp = '';
    for (var i = 0; i < parts.length; i++){
        tmp = path.join(tmp, parts[i]);
        all_path.push(tmp);
    }

    var href = [];
    var chain = '';
    var one_path = '';
    for (var j = 0; j < all_path.length; j++){
      one_path = path.join(prefix, all_path[j]);
      chain = chain + '<a href="' + one_path + '"> ' + parts[j] + ' </a>/';
    }
    //chain = '<a href="/treeview/">Home</a>/' + chain;
    return chain;

}


function make_cwd_chain(path_string){
    if (typeof path_string !== 'string') return;

    var parts = path_string.split('/');
    parts = parts.filter(function(e){return e !== '';}); //no empty ''

    var all_path = [];
    var tmp = '';
    for (var i = 0; i < parts.length; i++){
        tmp = path.join(tmp, parts[i]);
        all_path.push(tmp);
    }

    var href = [];
    var chain = '';
    var one_path = '';
    for (var j = 0; j < all_path.length; j++){
      one_path = path.join('/treeview/', all_path[j]);
      chain = chain + '<a href="' + one_path + '"> ' + parts[j] + ' </a>/';
    }
    chain = '<a href="/treeview/">Home</a>/' + chain;
    return chain;

}


function test_make_cwd_chain(){
  var a = make_cwd_chain('abc/goodagood/etc');
  console.log(a);
  console.log(make_cwd_chain('goodagood/public/images'));
}


/* test */
function test_clone_default_folder_file(){
  var fake_user = {username:'haha', id:'haha'};
  var cloned = clone_default_folder_file(fake_user);
  console.log(cloned);
}


exports.list = list;


if (require.main === module){
  //test_clone_default_folder_file();
  //test_check_out_cwd_tree();
  test_make_cwd_chain();

  setTimeout(function(){ process.exit(1); }, 3000);  // close the process.
}


// vim: set et ts=2 sw=2 fdm=indent:
