/*
 * Got sick to compile coffee then use the js to debug, 
 * change to plain js.  2016 mar18.
 */


// Generated by CoffeeScript 1.8.0
var assemble_folder_list_for_viewer, assemble_folder_listing_for_public, assemble_html_2, assemble_html_for_listing, assemble_html_with_css, async, bucket, cel, check_list_style, check_path_username_agree, css_file, deliver, folder_module, htool, isBlank, isEmpty, list, list_style, list_tmp, log28, ls_for_owner, ls_for_public, ls_for_username, ls_for_viewer, make_cwd_chain, markdown, meta, myconfig, mytemplate, myuser, myutil, path_chain, people, test_clone_default_folder_file, test_make_cwd_chain, tv, u, user_module ;

var util = require("util");
var path = require("path");

async = require("async");

u = require("underscore");

markdown = require("markdown").markdown;

cel = require("connect-ensure-login");

myuser = require("../myuser.js");

tv = require("../myutils/tv.js");

myutil = require("../myutils/myutil.js");

myconfig = require("../config/config.js");

bucket = require("../aws/bucket.js");

meta = require("../aws/meta.js");

folder_module = require("../aws/folder-v5.js");

var listor = require("../aws/listor.js");

deliver = require("../aws/file-deliver.js");

var ls_anyway = require('./ls-anyway.js');

mytemplate = require("../myutils/template.js");

log28 = require("../myutils/mylogb.js").double_log("/tmp/log28");

people = require("../users/people.js");

css_file = require("../aws/css-file.js");

htool = require("./html-tools.js");

var p = console.log;

var s3listor = require("../s3/list.js");

list = function(app) {
    var fileinfo, index_file, ls3, ls_anyway, ls_send, lsaw, lsimg, myel;

    // using this as first to try the new folder object. 2016 Mar 18.
    //app.get(/^\/ls-mar18\/(.*)/, function(req, res, next) {});
    app.get(/^\/ls\/(.*)/, function(req, res, next) {
        var cwd = req.params[0];

        var username;
        if(req.user) username = req.user.username;

        if (typeof cwd === "undefined" || !cwd) {
            cwd = username;
        }

        s3listor.ls_for_user(username, cwd, function(err, html){
            if(!err) return res.send(html);
            next(err);
        });
        //res.send('<h1>mar 18, 2016</h1>');
        //return ls_for_username(username, cwd, function(err, html) {
        //    return res.send(html);
        //});
    });


    app.get(/^\/ls63\/(.*)/, function(req, res, next) {
        var cwd = req.params[0];

        var username;
        if(req.user) username = req.user.username;

        if (typeof cwd === "undefined" || !cwd) {
            cwd = username;
        }

        s3listor.folder_list_with_permission(username, cwd, function(err, html){
            if(!err) return res.send(html);
            next(err);
        });
        //res.send('<h1>mar 18, 2016</h1>');
    });

    app.get(/^\/ls-anyway\/(.*)/, cel.ensureLoggedIn("/login"), function(req, res, next) {
        var cwd, id, params, username;
        cwd = req.params[0];
        username = req.user.username;
        id = req.user.id;
        if (typeof cwd === "undefined" || !cwd) {
            cwd = id;
        }
        params = {
            username: username,
        cwd: cwd,
        id: id
        };
        return ls_anyway.list_folder_anyway(params, function(err, html) {
            return res.send(html);
        });
    });

    myel = require("../login/ensure-login.js");
    app.get(/^\/ls-0407y6\/(.*)/, function(req, res, next) {
        var cwd, id, username;
        cwd = req.params[0];
        username = id = void 0;
        if ((req.user != null) && req.user) {
            username = req.user.username;
            id = req.user.id;
            if (typeof cwd === "undefined" || !cwd) {
                cwd = id;
            }
        }
        p('in "get/ls-0407y6..." username, cwd in ls', [username, cwd]);
        return listor.interface_listor(username, cwd, function(err, html) {
            if (err) {
                html = "<h1>we got err in 'interface listor' when 'get ls'.</h1>";
            }
            return res.send(html);
        });
    });
    index_file = require("../aws/index-file.js");
    app.get(/^\/index-html\/(.*)/, function(req, res, next) {
        var cwd, params, username;
        cwd = req.params[0];
        if (!cwd) {
            return res.send('<h1> unknow cwd </h1>');
        }
        username = null;
        if ((req.user != null)) {
            username = req.user.username;
        }
        params = {
            cwd: cwd,
        username: username
        };
        return index_file.read_folder_index_file_to_string(params, function(err, html) {
            if (err) {
                return res.end('read folder index.html err');
            }
            return res.send(html);
        });
    });
    ls3 = require('./ls3.js');
    app.get(/^\/ls211\/(.*)/, cel.ensureLoggedIn("/login"), function(req, res, next) {
        var cwd, err, username;
        cwd = req.params[0];
        username = req.user.username;
        if ((username == null) || !username) {
            err = '<h1>We are trying to find who who</h1>';
        }
        if (err) {
            return res.end(err);
        }
        if (typeof cwd === "undefined" || !cwd) {
            cwd = username;
        }
        return ls3.assemble_file_list(username, cwd, function(err, html) {
            if (err) {
                html = "<h1>some thing wrong in hand written list style.</h1>";
            }
            return res.send(html);
        });
    });
    lsaw = require('./ls-anyway.js');
    app.get(/^\/ls0502\/(.*)/, cel.ensureLoggedIn("/login"), function(req, res, next) {
        var err, opt;
        opt = {
            username: req.user.username,
        user_id: req.user.id,
        cwd: req.params[0]
        };
        if ((opt.username == null) || !opt.username) {
            err = '<h1>We are trying to find who who</h1>';
        }
        if (err) {
            return res.end(err);
        }
        if (typeof opt.cwd === "undefined" || !opt.cwd) {
            opt.cwd = '/';
        }
        return lsaw.give_folder_listing_parts(opt, function(err, parts) {
            p('ls0502 ', err, parts.username, u.omit(parts, 'file_list_ul'));
            if (err) {
                return res.end("<h1>some thing wrong in getting parts, ls0502.</h1>");
            }
            return res.render("ls-2015-0502", parts);
        });
    });
    lsimg = require('./ls-img.js');
    app.get(/^\/lsimg\/(.*)/, cel.ensureLoggedIn("/login"), function(req, res, next) {
        var cwd, err, username;
        cwd = req.params[0];
        username = req.user.username;
        err = '';
        if ((username == null) || !username) {
            err += '<h1>We are trying to find who who</h1>';
        }
        if ((cwd == null) || !cwd) {
            cwd = username;
        }
        if ((cwd == null) || !cwd) {
            err += '<h1>We can not find cwd</h1>';
        }
        if (err) {
            return res.end(err);
        }
        return lsimg.make_ls_img_context(username, cwd, function(err, context) {
            var html;
            if (err) {
                html = "<h1>some thing wrong in hand written list style.</h1>";
            }
            return res.render('ls-img', context);
        });
    });
    ls_send = require('./ls-send.js');
    app.get(/^\/ls-send\/(.*)/, cel.ensureLoggedIn("/login"), function(req, res, next) {
        var cwd, err, username;
        cwd = req.params[0];
        username = req.user.username;
        if ((username == null) || !username) {
            err = '<h1>We are trying to find who who</h1>';
        }
        if (err) {
            return res.end(err);
        }
        if (typeof cwd === "undefined" || !cwd) {
            cwd = username;
        }
        return ls_send.assemble_file_list(username, cwd, function(err, html) {
            if (err) {
                html = "<h1>some thing wrong in hand written list style.</h1>";
            }
            return res.send(html);
        });
    });
    fileinfo = require("../myutils/fileinfo-a.js");
    app.get(/^\/fileinfo-pathuuid\/(.*)/, cel.ensureLoggedIn("/login"), function(req, res, next) {
        var dir, puuid, username, uuid;
        username = req.user.username;
        puuid = req.params[0];
        if (!puuid) {
            return res.send('<h1> err, no path uuid</h1>');
        }
        dir = path.dirname(puuid);
        uuid = path.basename(puuid);
        return folder_module.retrieve_file_by_path_uuid(puuid, function(err, file) {
            var checked, context;
            if (err) {
                return res.send("<h1> file not found by p uuid</h1>");
            }
            meta = file.get_meta();
            checked = '';
            if (meta.unique) {
                checked = 'checked';
            }
            context = {
                info_list: file.build_file_info_list(),
               cwd: dir,
               cwd_chain: path_chain(dir),
               username: username,
               puuid: puuid,
               unique_is_checked: checked
            };
            return res.render('fi-pu', context);
        });
    });
    app.get(/^\/message\/(.*)/, cel.ensureLoggedIn("/login"), function(req, res, next) {
        var cwd, username;
        cwd = req.params[0];
        username = req.user.username;
        folder_module.retrieve_folder(cwd, function(folder) {
            var cwd_chain, ul;
            cwd_chain = path_chain(cwd, "/ls/");
            ul = folder.get_ul_renderring();
            res.render("ls", {
                user: req.user,
                username: req.user.username,
                cwd: cwd,
                cwd_chain: cwd_chain,
                user_folder_ul: ul
            });
        });
    });
    app.get(/^\/list-msg\/(.*)/, function(req, res, next) {
        var cwd, username;
        cwd = req.params[0];
        console.log("cwd");
        console.log(cwd);
        username = req.user.username;
        if (typeof cwd === "undefined" || !cwd) {
            cwd = path.join(username, "goodagood/.in");
        }
        console.log("cwd 2");
        console.log(cwd);
        meta.get_file_list_in_folder(cwd, function(err, data) {
            var cwd_chain;
            cwd_chain = path_chain(cwd, "/list-msg/");
            res.render("list3", {
                user: req.user,
                username: req.user.username,
                cwd: cwd,
                cwd_chain: cwd_chain,
                user_folder_ul: data
            });
        });
    });
    app.get("/testsend", cel.ensureLoggedIn("/login"), function(req, res, next) {
        var src, target, target_user;
        console.log("\n testsend \n");
        console.log(req.query);
        src = decodeURIComponent(req.query.src);
        target_user = decodeURIComponent(req.query.targetuser);
        target = path.join(target_user, myconfig.message_folder);
        deliver.copy_file(src, target);
        res.json(req.query);
        next();
    });
    app.post("/save-file-list/", cel.ensureLoggedIn("/login"), function(req, res, next) {
        var file_list, list_str;
        list_str = req.body.file_list_str;
        file_list = JSON.parse(list_str);
    });
    app.post("/send-file/", cel.ensureLoggedIn("/login"), function(req, res, next) {
        var file_list, file_list_str, jobs_of_sending, people_list, people_list_str;
        file_list_str = req.body.file_list_str;
        file_list = JSON.parse(file_list_str);
        people_list_str = req.body.people_list_str;
        people_list = JSON.parse(people_list_str);
        console.log("send-file post here\n", "file list:\n", file_list, "people list:\n", people_list);
        jobs_of_sending = [];
        file_list.forEach(function(src_file) {
            return people_list.forEach(function(target_user) {
                var dir, send_one;
                dir = path.join(target_user, myconfig.message_folder);
                p("to deliver with send file( ", [src_file, target_user]);
                send_one = function(callback) {
                    return deliver.send_file(src_file, target_user, dir, callback);
                };
                return jobs_of_sending.push(send_one);
            });
        });
        return async.parallel(jobs_of_sending, function(err, reply) {
            if (err) {
                res.json({
                    err: true
                });
            } else {
                res.json({
                    success: true
                });
            }
            return next();
        });
    });
    app.get(/\/add-folder\/(.*)/, cel.ensureLoggedIn("/login"), function(req, res) {
        var current_dir, cwd_chain;
        console.log("add-folder ...");
        console.log(req.user.username);
        current_dir = req.params[0];
        cwd_chain = path_chain(current_dir, "/ls/");
        console.log("current_dir");
        console.log(current_dir);
        return res.render("add-folder", {
            user: req.user,
               message: req.flash("error"),
               current_dir: current_dir,
               cwd_chain: cwd_chain
        });
    });
    app.post(/\/add-folder\/(.*)/, function(req, res) {
        var cwd, folder_name, username;
        cwd = req.params[0];
        username = req.user.username;
        folder_name = req.body.folder_name;
        return folder_module.retrieve_folder(cwd).then(function(current_dir_obj) {
            return current_dir_obj.add_folder(folder_name);
        }).then(function(new_folder) {
            return res.redirect("/ls/" + cwd);
        });
    });
    return app.get(/\/view\/(.*)/, function(req, res, next) {
        var file_path, username;
        file_path = req.params[0];
        username = req.user.username;
        console.log("view-- ", file_path);
        return folder_module.retrieve_file_meta(file_path, function(meta) {
            var contents, text;
            if (meta.storage.type === "meta-text") {
                text = meta.storage.text;
                contents = markdown.toHTML(text);
                res.render("view", {
                    user: req.user,
                    message: req.flash("error"),
                    contents: contents
                });
            }
            if (meta.storage.type === "s3") {
                return bucket.read_file(meta.storage.key, function(err, text) {
                    contents = markdown.toHTML(text);
                    return res.render("view", {
                        user: req.user,
                           message: req.flash("error"),
                           contents: contents
                    });
                });
            }
        });
    });
};

ls_for_username = function(username, cwd, callback) {
    return folder_module.retrieve_folder(cwd).then(function(folder) {
        if (!folder) {
            return callback("?cwd: " + cwd);
        }
        return folder.check_username(username, function(err, what) {
            switch (what) {
                case "owner":
                    return ls_for_owner(username, folder, callback);
                case "member":
                    return ls_for_owner(username, folder, callback);
                case "viewer":
                    return ls_for_viewer(username, folder, callback);
                case "who-known":
                    return ls_for_public(username, folder, callback);
                default:
                    return ls_for_public(username, folder, callback);
            }
        });
    });
};

ls_for_owner = function(username, folder, callback) {
    var cwd, cwd_chain;
    meta = folder.get_meta();
    cwd = meta.path;
    cwd_chain = myutil.path_chain(cwd, "/ls/");
    return folder.give_ul_renderring(username, function(ul) {
        var Man;
        Man = {};
        return people.make_people_manager_for_user(username).then(function(man) {
            Man = man;
            return Man.get_a_few();
        }).then(function(current_people) {
            if (u.isArray(current_people)) {
                current_people = htool.name_list_to_checkbox(current_people);
            }
            if (!current_people) {
                current_people = "<p>error or chose people from <a href=\"/people\"> people</a></p>";
            }
            return css_file.read_css_file_of_folder(meta.path).then(function(css_as_string) {
                return assemble_html_with_css(username, ul, cwd, cwd_chain, current_people, css_as_string, function(html) {
                    return callback(null, html);
                });
            });
        });
    });
};

ls_for_viewer = function(username, folder, callback) {
    var cwd, cwd_chain;
    meta = folder.get_meta();
    cwd = meta.path;
    cwd_chain = myutil.path_chain(cwd, "/ls/");
    folder.give_ul_renderring(username, function(ul) {
        assemble_folder_list_for_viewer(username, ul, cwd, cwd_chain, null, callback);
    });
};

ls_for_public = function(username, folder, callback) {
    var cwd, cwd_chain;
    meta = folder.get_meta();
    cwd = meta.path;
    cwd_chain = myutil.path_chain(cwd, "/ls/");
    folder.give_ul_renderring(username, function(ul) {
        assemble_folder_listing_for_public(username, ul, null, null, null, callback);
    });
};

assemble_folder_listing_for_public = function(username, ul_file_list, cwd, cwd_chain, current_people, callback) {
    var contexts, html_elements;
    contexts = {
        body: {
            user_folder_ul: ul_file_list,
            cwd: cwd,
            cwd_chain: cwd_chain,
            current_people: current_people
        },
        header: {
            username: username
        }
    };
    html_elements = {
        body: "public-list.html",
        header: "goodheader.html",
        navbar: "empty.html",
        script: "empty.html",
        frame: "frame-a.html"
    };
    mytemplate.assemble_html(html_elements, contexts, function(html) {
        callback(html);
    });
};

assemble_folder_list_for_viewer = function(username, ul_file_list, cwd, cwd_chain, current_people, callback) {
    var contexts, html_elements;
    contexts = {
        body: {
            user_folder_ul: ul_file_list,
            cwd: cwd,
            cwd_chain: cwd_chain,
            current_people: current_people
        },
        header: {
            username: username
        }
    };
    html_elements = {
        body: "viewer-folder-list.html",
        header: "goodheader.html",
        navbar: "people-file-navtabs.html",
        script: "file-list-script.html",
        frame: "frame-a.html"
    };
    return mytemplate.assemble_html(html_elements, contexts, function(html) {
        callback(null, html);
    });
};

assemble_html_for_listing = function(username, ul_file_list, cwd, cwd_chain, current_people, callback) {
    var contexts, html_elements;
    contexts = {
        body: {
            user_folder_ul: ul_file_list,
            cwd: cwd,
            cwd_chain: cwd_chain,
            current_people: current_people
        },
        header: {
            username: username
        }
    };
    html_elements = {
        body: "file-list.html",
        header: "goodheader.html",
        navbar: "people-file-navtabs.html",
        script: "file-list-script.html",
        frame: "frame-a.html"
    };
    return mytemplate.assemble_html_v2(html_elements, contexts).then(function(html) {
        return callback(html);
    });
};

assemble_html_with_css = function(username, ul_file_list, cwd, cwd_chain, current_people, in_file_css, callback) {
    var contexts, html_elements;
    contexts = {
        body: {
            user_folder_ul: ul_file_list,
            cwd: cwd,
            cwd_chain: cwd_chain,
            current_people: current_people
        },
        header: {
            username: username
        },
        frame: {
            in_file_css: in_file_css
        }
    };
    html_elements = {
        body: "file-list.html",
        header: "goodheader.html",
        navbar: "people-file-navtabs.html",
        script: "file-list-script.html",
        frame: "frame-b.html"
    };
    return mytemplate.assemble_html_v2(html_elements, contexts).then(function(html) {
        return callback(html);
    });
};

isEmpty = function(str) {
    return !str || 0 === str.length;
};

isBlank = function(str) {
    return !str || /^\s*$/.test(str);
};

check_path_username_agree = function(path, username) {
    if (path.indexOf(username) !== 0) {
        return false;
    }
    return true;
};

path_chain = function(path_string, prefix) {
    var all_path, chain, href, i, j, one_path, parts, tmp;
    if (typeof path_string !== "string") {
        return;
    }
    prefix = prefix || '/ls/';
    parts = path_string.split("/");
    parts = parts.filter(function(e) {
        return e !== "";
    });
    all_path = [];
    tmp = "";
    i = 0;
    while (i < parts.length) {
        tmp = path.join(tmp, parts[i]);
        all_path.push(tmp);
        i++;
    }
    href = [];
    chain = "\n";
    one_path = "";
    j = 0;
    while (j < all_path.length) {
        one_path = path.join(prefix, all_path[j]);
        chain = chain + "\n<a class=\"path_part\" href=\"" + one_path + "\"> " + parts[j] + " </a>/";
        j++;
    }
    return chain;
};

make_cwd_chain = function(path_string) {
    var all_path, chain, href, i, j, one_path, parts, tmp;
    if (typeof path_string !== "string") {
        return;
    }
    parts = path_string.split("/");
    parts = parts.filter(function(e) {
        return e !== "";
    });
    all_path = [];
    tmp = "";
    i = 0;
    while (i < parts.length) {
        tmp = path.join(tmp, parts[i]);
        all_path.push(tmp);
        i++;
    }
    href = [];
    chain = "";
    one_path = "";
    j = 0;
    while (j < all_path.length) {
        one_path = path.join("/treeview/", all_path[j]);
        chain = chain + "<a href=\"" + one_path + "\"> " + parts[j] + " </a>/";
        j++;
    }
    chain = "<a href=\"/treeview/\">Home</a>/" + chain;
    return chain;
};

list_style = function(username, cwd, callback) {
    return folder_module.retrieve_folder(cwd).then(function(folder) {
        if (!folder) {
            return callback("? no folder object for: " + cwd);
        }
        return folder.check_username(username, function(err, role) {
            p("check user name, role : ", role);
            if (err) {
                return callback([err, role], null);
            }
            return folder.give_ul_renderring(username, function(ul) {
                p('give ul renderring: ', ul.slice(0, 100));
                return people.make_people_manager_for_user(username).then(function(man) {
                    return man.get_a_few();
                }).then(function(current_people) {
                    var cwd_chain;
                    if (u.isArray(current_people)) {
                        current_people = htool.name_list_to_checkbox(current_people);
                    }
                    if (!current_people) {
                        current_people = "<p>error or chose people from <a href=\"/people\"> people</a></p>";
                    }
                    cwd_chain = myutil.path_chain(cwd, "/ls/");
                    console.log("parameters: username, cwd, cwd_chain, current_people \n", username, cwd, cwd_chain, current_people);
                    return css_file.read_css_file_of_folder(cwd).then(function(css_as_string) {
                        return assemble_html_2(username, ul, cwd, cwd_chain, current_people, css_as_string, function(html) {
                            return callback(null, html);
                        });
                    });
                });
            });
        });
    });
};

user_module = require("../users/a.js");

list_tmp = function(username, cwd, callback) {
    user_module.get_user_id(username, function(err, id) {
        return p('get user id: ', id, username);
    });
    return folder_module.retrieve_folder(cwd).then(function(folder) {
        var current_people, cwd_chain, ul;
        if (!folder) {
            return callback("? no folder object for: " + cwd);
        }
        ul = folder.get_ul_renderring();
        current_people = "<p>not added in tmp solution 0417</p>";
        cwd_chain = myutil.path_chain(cwd, "/ls/");
        console.log("parameters: username, cwd, cwd_chain, current_people \n", username, cwd, cwd_chain, current_people);
        return css_file.read_css_file_of_folder(cwd).then(function(css_as_string) {
            return assemble_html_2(username, ul, cwd, cwd_chain, current_people, css_as_string, function(html) {
                return callback(null, html);
            });
        });
    });
};

assemble_html_2 = function(username, ul_file_list, cwd, cwd_chain, current_people, in_file_css, callback) {
    var contexts, html_elements;
    contexts = {
        body: {
            user_folder_ul: ul_file_list,
            cwd: cwd,
            cwd_chain: cwd_chain,
            current_people: current_people
        },
        header: {
            username: username
        },
        frame: {
            in_file_css: in_file_css
        }
    };
    html_elements = {
        body: "ls2.html",
        header: "ls2header.html",
        navbar: "ls2nav.html",
        script: "file-list-script.html",
        frame: "frame-c.html"
    };
    return mytemplate.assemble_html_v2(html_elements, contexts).then(function(html) {
        return callback(html);
    });
};

check_list_style = function() {
    var name, path_;
    name = 'abc';
    path_ = 'abc';
    return list_style(name, path_, function(err, html) {
        return console.log(err, html.slice(0, 100));
    });
};

test_make_cwd_chain = function() {
    var a;
    a = make_cwd_chain("abc/goodagood/etc");
    console.log(a);
    console.log(make_cwd_chain("goodagood/public/images"));
};

test_clone_default_folder_file = function() {
    var cloned, fake_user;
    fake_user = {
        username: "haha",
        id: "haha"
    };
    cloned = clone_default_folder_file(fake_user);
    console.log(cloned);
};

module.exports.list = exports.list = list;

module.exports.ls_for_owner = exports.ls_for_owner = ls_for_owner;

module.exports.ls_for_username = exports.ls_for_username = ls_for_username;

module.exports.path_to_chain = exports.path_to_chain = path_chain;

module.exports.list_style = exports.list_style = list_style;

module.exports.list_tmp = exports.list_tmp = list_tmp;

if (require.main === module) {
    check_list_style();
    setTimeout(function() {
        process.exit(1000);
    }, 3000);
}

